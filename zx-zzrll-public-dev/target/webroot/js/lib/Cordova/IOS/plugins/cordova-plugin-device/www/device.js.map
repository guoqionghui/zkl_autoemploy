{"version":3,"sources":["js/lib/Cordova/IOS/plugins/cordova-plugin-device/www/device.js"],"names":["cordova","define","require","exports","module","Device","this","available","platform","version","uuid","model","manufacturer","isVirtual","serial","me","channel","onCordovaReady","subscribe","getInfo","info","buildLabel","onCordovaInfoReady","fire","e","utils","alert","argscheck","exec","createSticky","waitForInitialization","prototype","successCallback","errorCallback","checkArgs","arguments"],"mappings":"AAAAA,QAAQC,OAAO,+BAAgC,SAASC,EAASC,EAASC,GAqC1E,QAASC,KACLC,KAAKC,WAAY,EACjBD,KAAKE,SAAW,KAChBF,KAAKG,QAAU,KACfH,KAAKI,KAAO,KACZJ,KAAKN,QAAU,KACfM,KAAKK,MAAQ,KACbL,KAAKM,aAAe,KACpBN,KAAKO,UAAY,KACjBP,KAAKQ,OAAS,IAEd,IAAIC,GAAKT,IAETU,GAAQC,eAAeC,UAAU,WAC7BH,EAAGI,QAAQ,SAASC,GAGhB,GAAIC,GAAarB,EAAQS,OACzBM,GAAGR,WAAY,EACfQ,EAAGP,SAAWY,EAAKZ,SACnBO,EAAGN,QAAUW,EAAKX,QAClBM,EAAGL,KAAOU,EAAKV,KACfK,EAAGf,QAAUqB,EACbN,EAAGJ,MAAQS,EAAKT,MAChBI,EAAGF,UAAYO,EAAKP,UACpBE,EAAGH,aAAeQ,EAAKR,cAAgB,UACvCG,EAAGD,OAASM,EAAKN,QAAU,UAC3BE,EAAQM,mBAAmBC,QAC7B,SAASC,GACPT,EAAGR,WAAY,EACfkB,EAAMC,MAAM,uCAAyCF,OA7CjE,GAAIG,GAAYzB,EAAQ,qBACpBc,EAAUd,EAAQ,mBAClBuB,EAAQvB,EAAQ,iBAChB0B,EAAO1B,EAAQ,gBACfF,EAAUE,EAAQ,UAEtBc,GAAQa,aAAa,sBAErBb,EAAQc,sBAAsB,sBAgD9BzB,EAAO0B,UAAUZ,QAAU,SAASa,EAAiBC,GACjDN,EAAUO,UAAU,KAAM,iBAAkBC,WAC5CP,EAAKI,EAAiBC,EAAe,SAAU,qBAGnD7B,EAAOD,QAAU,GAAIE","file":"js/lib/Cordova/IOS/plugins/cordova-plugin-device/www/device.js","sourcesContent":["cordova.define(\"cordova-plugin-device.device\", function(require, exports, module) {\n/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar argscheck = require('cordova/argscheck'),\n    channel = require('cordova/channel'),\n    utils = require('cordova/utils'),\n    exec = require('cordova/exec'),\n    cordova = require('cordova');\n\nchannel.createSticky('onCordovaInfoReady');\n// Tell cordova channel to wait on the CordovaInfoReady event\nchannel.waitForInitialization('onCordovaInfoReady');\n\n/**\n * This represents the mobile device, and provides properties for inspecting the model, version, UUID of the\n * phone, etc.\n * @constructor\n */\nfunction Device() {\n    this.available = false;\n    this.platform = null;\n    this.version = null;\n    this.uuid = null;\n    this.cordova = null;\n    this.model = null;\n    this.manufacturer = null;\n    this.isVirtual = null;\n    this.serial = null;\n\n    var me = this;\n\n    channel.onCordovaReady.subscribe(function() {\n        me.getInfo(function(info) {\n            //ignoring info.cordova returning from native, we should use value from cordova.version defined in cordova.js\n            //TODO: CB-5105 native implementations should not return info.cordova\n            var buildLabel = cordova.version;\n            me.available = true;\n            me.platform = info.platform;\n            me.version = info.version;\n            me.uuid = info.uuid;\n            me.cordova = buildLabel;\n            me.model = info.model;\n            me.isVirtual = info.isVirtual;\n            me.manufacturer = info.manufacturer || 'unknown';\n            me.serial = info.serial || 'unknown';\n            channel.onCordovaInfoReady.fire();\n        },function(e) {\n            me.available = false;\n            utils.alert(\"[ERROR] Error initializing Cordova: \" + e);\n        });\n    });\n}\n\n/**\n * Get device info\n *\n * @param {Function} successCallback The function to call when the heading data is available\n * @param {Function} errorCallback The function to call when there is an error getting the heading data. (OPTIONAL)\n */\nDevice.prototype.getInfo = function(successCallback, errorCallback) {\n    argscheck.checkArgs('fF', 'Device.getInfo', arguments);\n    exec(successCallback, errorCallback, \"Device\", \"getDeviceInfo\", []);\n};\n\nmodule.exports = new Device();\n\n});\n"],"sourceRoot":"/source/"}