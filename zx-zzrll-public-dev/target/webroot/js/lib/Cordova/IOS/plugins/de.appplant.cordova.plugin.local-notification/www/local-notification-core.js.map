{"version":3,"sources":["js/lib/Cordova/IOS/plugins/de.appplant.cordova.plugin.local-notification/www/local-notification-core.js"],"names":["cordova","define","require","exports","module","exec","getDefaults","this","_defaults","setDefaults","newDefaults","defaults","key","hasOwnProperty","schedule","msgs","callback","scope","args","fn","granted","notifications","Array","isArray","i","length","notification","mergeWithDefaults","convertProperties","skipPermission","call","registerPermission","update","clear","ids","convertIds","clearAll","cancel","cancelAll","isPresent","id","isScheduled","isTriggered","getAllIds","getIds","apply","arguments","getScheduledIds","getTriggeredIds","get","unshift","Number","getAll","getScheduled","getAllScheduled","getTriggered","getAllTriggered","hasPermission","createCallbackFn","device","platform","_registered","on","event","_listener","item","window","push","un","listener","splice"],"mappings":"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","file":"js/lib/Cordova/IOS/plugins/de.appplant.cordova.plugin.local-notification/www/local-notification-core.js","sourcesContent":["cordova.define(\"de.appplant.cordova.plugin.local-notification.LocalNotification.Core\", function(require, exports, module) {\n/*\n * Copyright (c) 2013-2015 by appPlant UG. All rights reserved.\n *\n * @APPPLANT_LICENSE_HEADER_START@\n *\n * This file contains Original Code and/or Modifications of Original Code\n * as defined in and that are subject to the Apache License\n * Version 2.0 (the 'License'). You may not use this file except in\n * compliance with the License. Please obtain a copy of the License at\n * http://opensource.org/licenses/Apache-2.0/ and read it before using this\n * file.\n *\n * The Original Code and all software distributed under the License are\n * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER\n * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,\n * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.\n * Please see the License for the specific language governing rights and\n * limitations under the License.\n *\n * @APPPLANT_LICENSE_HEADER_END@\n */\n\nvar exec = require('cordova/exec');\n\n\n/********\n * CORE *\n ********/\n\n/**\n * Returns the default settings.\n *\n * @return {Object}\n */\nexports.getDefaults = function () {\n    return this._defaults;\n};\n\n/**\n * Overwrite default settings.\n *\n * @param {Object} defaults\n */\nexports.setDefaults = function (newDefaults) {\n    var defaults = this.getDefaults();\n\n    for (var key in defaults) {\n        if (newDefaults.hasOwnProperty(key)) {\n            defaults[key] = newDefaults[key];\n        }\n    }\n};\n\n/**\n * Schedule a new local notification.\n *\n * @param {Object} msgs\n *      The notification properties\n * @param {Function} callback\n *      A function to be called after the notification has been canceled\n * @param {Object?} scope\n *      The scope for the callback function\n * @param {Object?} args\n *      skipPermission:true schedules the notifications immediatly without\n *                          registering or checking for permission\n */\nexports.schedule = function (msgs, callback, scope, args) {\n    var fn = function(granted) {\n\n        if (!granted) return;\n\n        var notifications = Array.isArray(msgs) ? msgs : [msgs];\n\n        for (var i = 0; i < notifications.length; i++) {\n            var notification = notifications[i];\n\n            this.mergeWithDefaults(notification);\n            this.convertProperties(notification);\n        }\n\n        this.exec('schedule', notifications, callback, scope);\n    };\n\n    if (args && args.skipPermission) {\n        fn.call(this, true);\n    } else {\n        this.registerPermission(fn, this);\n    }\n};\n\n/**\n * Update existing notifications specified by IDs in options.\n *\n * @param {Object} notifications\n *      The notification properties to update\n * @param {Function} callback\n *      A function to be called after the notification has been updated\n * @param {Object?} scope\n *      The scope for the callback function\n * @param {Object?} args\n *      skipPermission:true schedules the notifications immediatly without\n *                          registering or checking for permission\n */\nexports.update = function (msgs, callback, scope, args) {\n    var fn = function(granted) {\n\n        if (!granted) return;\n\n        var notifications = Array.isArray(msgs) ? msgs : [msgs];\n\n        for (var i = 0; i < notifications.length; i++) {\n            var notification = notifications[i];\n\n            this.convertProperties(notification);\n        }\n\n        this.exec('update', notifications, callback, scope);\n    };\n\n    if (args && args.skipPermission) {\n        fn.call(this, true);\n    } else {\n        this.registerPermission(fn, this);\n    }\n};\n\n/**\n * Clear the specified notification.\n *\n * @param {String} id\n *      The ID of the notification\n * @param {Function} callback\n *      A function to be called after the notification has been cleared\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.clear = function (ids, callback, scope) {\n    ids = Array.isArray(ids) ? ids : [ids];\n    ids = this.convertIds(ids);\n\n    this.exec('clear', ids, callback, scope);\n};\n\n/**\n * Clear all previously sheduled notifications.\n *\n * @param {Function} callback\n *      A function to be called after all notifications have been cleared\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.clearAll = function (callback, scope) {\n    this.exec('clearAll', null, callback, scope);\n};\n\n/**\n * Cancel the specified notifications.\n *\n * @param {String[]} ids\n *      The IDs of the notifications\n * @param {Function} callback\n *      A function to be called after the notifications has been canceled\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.cancel = function (ids, callback, scope) {\n    ids = Array.isArray(ids) ? ids : [ids];\n    ids = this.convertIds(ids);\n\n    this.exec('cancel', ids, callback, scope);\n};\n\n/**\n * Remove all previously registered notifications.\n *\n * @param {Function} callback\n *      A function to be called after all notifications have been canceled\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.cancelAll = function (callback, scope) {\n    this.exec('cancelAll', null, callback, scope);\n};\n\n/**\n * Check if a notification with an ID is present.\n *\n * @param {String} id\n *      The ID of the notification\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.isPresent = function (id, callback, scope) {\n    this.exec('isPresent', id || 0, callback, scope);\n};\n\n/**\n * Check if a notification with an ID is scheduled.\n *\n * @param {String} id\n *      The ID of the notification\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.isScheduled = function (id, callback, scope) {\n    this.exec('isScheduled', id || 0, callback, scope);\n};\n\n/**\n * Check if a notification with an ID was triggered.\n *\n * @param {String} id\n *      The ID of the notification\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.isTriggered = function (id, callback, scope) {\n    this.exec('isTriggered', id || 0, callback, scope);\n};\n\n/**\n * List all local notification IDs.\n *\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.getAllIds = function (callback, scope) {\n    this.exec('getAllIds', null, callback, scope);\n};\n\n/**\n * Alias for `getAllIds`.\n */\nexports.getIds = function () {\n    this.getAllIds.apply(this, arguments);\n};\n\n/**\n * List all scheduled notification IDs.\n *\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.getScheduledIds = function (callback, scope) {\n    this.exec('getScheduledIds', null, callback, scope);\n};\n\n/**\n * List all triggered notification IDs.\n *\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.getTriggeredIds = function (callback, scope) {\n    this.exec('getTriggeredIds', null, callback, scope);\n};\n\n/**\n * Property list for given local notifications.\n * If called without IDs, all notification will be returned.\n *\n * @param {Number[]?} ids\n *      Set of notification IDs\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.get = function () {\n    var args = Array.apply(null, arguments);\n\n    if (typeof args[0] == 'function') {\n        args.unshift([]);\n    }\n\n    var ids      = args[0],\n        callback = args[1],\n        scope    = args[2];\n\n    if (!Array.isArray(ids)) {\n        this.exec('getSingle', Number(ids), callback, scope);\n        return;\n    }\n\n    ids = this.convertIds(ids);\n\n    this.exec('getAll', ids, callback, scope);\n};\n\n/**\n * Property list for all local notifications.\n *\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.getAll = function (callback, scope) {\n    this.exec('getAll', null, callback, scope);\n};\n\n/**\n * Property list for given scheduled notifications.\n * If called without IDs, all notification will be returned.\n *\n * @param {Number[]?} ids\n *      Set of notification IDs\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.getScheduled = function () {\n    var args = Array.apply(null, arguments);\n\n    if (typeof args[0] == 'function') {\n        args.unshift([]);\n    }\n\n    var ids      = args[0],\n        callback = args[1],\n        scope    = args[2];\n\n    if (!Array.isArray(ids)) {\n        ids = [ids];\n    }\n\n    if (!Array.isArray(ids)) {\n        this.exec('getSingleScheduled', Number(ids), callback, scope);\n        return;\n    }\n\n    ids = this.convertIds(ids);\n\n    this.exec('getScheduled', ids, callback, scope);\n};\n\n/**\n * Property list for all scheduled notifications.\n *\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.getAllScheduled = function (callback, scope) {\n    this.exec('getScheduled', null, callback, scope);\n};\n\n/**\n * Property list for given triggered notifications.\n * If called without IDs, all notification will be returned.\n *\n * @param {Number[]?} ids\n *      Set of notification IDs\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.getTriggered = function () {\n    var args = Array.apply(null, arguments);\n\n    if (typeof args[0] == 'function') {\n        args.unshift([]);\n    }\n\n    var ids      = args[0],\n        callback = args[1],\n        scope    = args[2];\n\n    if (!Array.isArray(ids)) {\n        ids = [ids];\n    }\n\n    if (!Array.isArray(ids)) {\n        this.exec('getSingleTriggered', Number(ids), callback, scope);\n        return;\n    }\n\n    ids = this.convertIds(ids);\n\n    this.exec('getTriggered', ids, callback, scope);\n};\n\n/**\n * Property list for all triggered notifications.\n *\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.getAllTriggered = function (callback, scope) {\n    this.exec('getTriggered', null, callback, scope);\n};\n\n/**\n * Informs if the app has the permission to show notifications.\n *\n * @param {Function} callback\n *      The function to be exec as the callback\n * @param {Object?} scope\n *      The callback function's scope\n */\nexports.hasPermission = function (callback, scope) {\n    var fn = this.createCallbackFn(callback, scope);\n\n    if (device.platform != 'iOS') {\n        fn(true);\n        return;\n    }\n\n    exec(fn, null, 'LocalNotification', 'hasPermission', []);\n};\n\n/**\n * Register permission to show notifications if not already granted.\n *\n * @param {Function} callback\n *      The function to be exec as the callback\n * @param {Object?} scope\n *      The callback function's scope\n */\nexports.registerPermission = function (callback, scope) {\n\n    if (this._registered) {\n        return this.hasPermission(callback, scope);\n    } else {\n        this._registered = true;\n    }\n\n    var fn = this.createCallbackFn(callback, scope);\n\n    if (device.platform != 'iOS') {\n        fn(true);\n        return;\n    }\n\n    exec(fn, null, 'LocalNotification', 'registerPermission', []);\n};\n\n\n/**********\n * EVENTS *\n **********/\n\n/**\n * Register callback for given event.\n *\n * @param {String} event\n *      The event's name\n * @param {Function} callback\n *      The function to be exec as callback\n * @param {Object?} scope\n *      The callback function's scope\n */\nexports.on = function (event, callback, scope) {\n\n    if (typeof callback !== \"function\")\n        return;\n\n    if (!this._listener[event]) {\n        this._listener[event] = [];\n    }\n\n    var item = [callback, scope || window];\n\n    this._listener[event].push(item);\n};\n\n/**\n * Unregister callback for given event.\n *\n * @param {String} event\n *      The event's name\n * @param {Function} callback\n *      The function to be exec as callback\n */\nexports.un = function (event, callback) {\n    var listener = this._listener[event];\n\n    if (!listener)\n        return;\n\n    for (var i = 0; i < listener.length; i++) {\n        var fn = listener[i][0];\n\n        if (fn == callback) {\n            listener.splice(i, 1);\n            break;\n        }\n    }\n};\n\n});\n"],"sourceRoot":"/source/"}