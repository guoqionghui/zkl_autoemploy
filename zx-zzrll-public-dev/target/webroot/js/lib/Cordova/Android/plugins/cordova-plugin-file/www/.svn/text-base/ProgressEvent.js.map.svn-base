{"version":3,"sources":["js/lib/Cordova/Android/plugins/cordova-plugin-file/www/ProgressEvent.js"],"names":["cordova","define","require","exports","module","ProgressEvent","type","dict","this","bubbles","cancelBubble","cancelable","lengthComputable","loaded","total","target"],"mappings":"AAAAA,QAAQC,OAAO,oCAAqC,SAASC,EAASC,EAASC,GA4B/E,GAAIC,GAAgB,WA0BZ,MAAO,UAAuBC,EAAMC,GAChCC,KAAKF,KAAOA,EACZE,KAAKC,SAAU,EACfD,KAAKE,cAAe,EACpBF,KAAKG,YAAa,EAClBH,KAAKI,kBAAmB,EACxBJ,KAAKK,OAASN,GAAQA,EAAKM,OAASN,EAAKM,OAAS,EAClDL,KAAKM,MAAQP,GAAQA,EAAKO,MAAQP,EAAKO,MAAQ,EAC/CN,KAAKO,OAASR,GAAQA,EAAKQ,OAASR,EAAKQ,OAAS,QAK9DX,GAAOD,QAAUE","file":"js/lib/Cordova/Android/plugins/cordova-plugin-file/www/ProgressEvent.js","sourcesContent":["cordova.define(\"cordova-plugin-file.ProgressEvent\", function(require, exports, module) {\n/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n// If ProgressEvent exists in global context, use it already, otherwise use our own polyfill\n// Feature test: See if we can instantiate a native ProgressEvent;\n// if so, use that approach,\n// otherwise fill-in with our own implementation.\n//\n// NOTE: right now we always fill in with our own. Down the road would be nice if we can use whatever is native in the webview.\nvar ProgressEvent = (function() {\n    /*\n    var createEvent = function(data) {\n        var event = document.createEvent('Events');\n        event.initEvent('ProgressEvent', false, false);\n        if (data) {\n            for (var i in data) {\n                if (data.hasOwnProperty(i)) {\n                    event[i] = data[i];\n                }\n            }\n            if (data.target) {\n                // TODO: cannot call <some_custom_object>.dispatchEvent\n                // need to first figure out how to implement EventTarget\n            }\n        }\n        return event;\n    };\n    try {\n        var ev = createEvent({type:\"abort\",target:document});\n        return function ProgressEvent(type, data) {\n            data.type = type;\n            return createEvent(data);\n        };\n    } catch(e){\n    */\n        return function ProgressEvent(type, dict) {\n            this.type = type;\n            this.bubbles = false;\n            this.cancelBubble = false;\n            this.cancelable = false;\n            this.lengthComputable = false;\n            this.loaded = dict && dict.loaded ? dict.loaded : 0;\n            this.total = dict && dict.total ? dict.total : 0;\n            this.target = dict && dict.target ? dict.target : null;\n        };\n    //}\n})();\n\nmodule.exports = ProgressEvent;\n\n});\n"],"sourceRoot":"/source/"}