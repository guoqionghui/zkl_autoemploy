{"version":3,"sources":["js/lib/Cordova/Android/plugins/cordova-plugin-file/www/Entry.js"],"names":["cordova","define","require","exports","module","Entry","isFile","isDirectory","name","fullPath","fileSystem","nativeURL","this","filesystem","argscheck","exec","FileError","Metadata","prototype","getMetadata","successCallback","errorCallback","checkArgs","arguments","success","entryMetadata","metadata","size","modificationTime","lastModifiedDate","fail","code","toInternalURL","setMetadata","metadataObject","moveTo","parent","newName","srcURL","entry","newFSName","filesystemName","fs","FileSystem","result","NOT_FOUND_ERR","copyTo","__format__","toURL","toNativeURL","console","log","toURI","mimeType","remove","getParent","win","DirectoryEntry"],"mappings":"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","file":"js/lib/Cordova/Android/plugins/cordova-plugin-file/www/Entry.js","sourcesContent":["cordova.define(\"cordova-plugin-file.Entry\", function(require, exports, module) {\n/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar argscheck = require('cordova/argscheck'),\n    exec = require('cordova/exec'),\n    FileError = require('./FileError'),\n    Metadata = require('./Metadata');\n\n/**\n * Represents a file or directory on the local file system.\n *\n * @param isFile\n *            {boolean} true if Entry is a file (readonly)\n * @param isDirectory\n *            {boolean} true if Entry is a directory (readonly)\n * @param name\n *            {DOMString} name of the file or directory, excluding the path\n *            leading to it (readonly)\n * @param fullPath\n *            {DOMString} the absolute full path to the file or directory\n *            (readonly)\n * @param fileSystem\n *            {FileSystem} the filesystem on which this entry resides\n *            (readonly)\n * @param nativeURL\n *            {DOMString} an alternate URL which can be used by native\n *            webview controls, for example media players.\n *            (optional, readonly)\n */\nfunction Entry(isFile, isDirectory, name, fullPath, fileSystem, nativeURL) {\n    this.isFile = !!isFile;\n    this.isDirectory = !!isDirectory;\n    this.name = name || '';\n    this.fullPath = fullPath || '';\n    this.filesystem = fileSystem || null;\n    this.nativeURL = nativeURL || null;\n}\n\n/**\n * Look up the metadata of the entry.\n *\n * @param successCallback\n *            {Function} is called with a Metadata object\n * @param errorCallback\n *            {Function} is called with a FileError\n */\nEntry.prototype.getMetadata = function(successCallback, errorCallback) {\n    argscheck.checkArgs('FF', 'Entry.getMetadata', arguments);\n    var success = successCallback && function(entryMetadata) {\n        var metadata = new Metadata({\n            size: entryMetadata.size,\n            modificationTime: entryMetadata.lastModifiedDate\n        });\n        successCallback(metadata);\n    };\n    var fail = errorCallback && function(code) {\n        errorCallback(new FileError(code));\n    };\n    exec(success, fail, \"File\", \"getFileMetadata\", [this.toInternalURL()]);\n};\n\n/**\n * Set the metadata of the entry.\n *\n * @param successCallback\n *            {Function} is called with a Metadata object\n * @param errorCallback\n *            {Function} is called with a FileError\n * @param metadataObject\n *            {Object} keys and values to set\n */\nEntry.prototype.setMetadata = function(successCallback, errorCallback, metadataObject) {\n    argscheck.checkArgs('FFO', 'Entry.setMetadata', arguments);\n    exec(successCallback, errorCallback, \"File\", \"setMetadata\", [this.toInternalURL(), metadataObject]);\n};\n\n/**\n * Move a file or directory to a new location.\n *\n * @param parent\n *            {DirectoryEntry} the directory to which to move this entry\n * @param newName\n *            {DOMString} new name of the entry, defaults to the current name\n * @param successCallback\n *            {Function} called with the new DirectoryEntry object\n * @param errorCallback\n *            {Function} called with a FileError\n */\nEntry.prototype.moveTo = function(parent, newName, successCallback, errorCallback) {\n    argscheck.checkArgs('oSFF', 'Entry.moveTo', arguments);\n    var fail = errorCallback && function(code) {\n        errorCallback(new FileError(code));\n    };\n    var srcURL = this.toInternalURL(),\n        // entry name\n        name = newName || this.name,\n        success = function(entry) {\n            if (entry) {\n                if (successCallback) {\n                    // create appropriate Entry object\n                    var newFSName = entry.filesystemName || (entry.filesystem && entry.filesystem.name);\n                    var fs = newFSName ? new FileSystem(newFSName, { name: \"\", fullPath: \"/\" }) : new FileSystem(parent.filesystem.name, { name: \"\", fullPath: \"/\" });\n                    var result = (entry.isDirectory) ? new (require('./DirectoryEntry'))(entry.name, entry.fullPath, fs, entry.nativeURL) : new (require('cordova-plugin-file.FileEntry'))(entry.name, entry.fullPath, fs, entry.nativeURL);\n                    successCallback(result);\n                }\n            }\n            else {\n                // no Entry object returned\n                if (fail) {\n                    fail(FileError.NOT_FOUND_ERR);\n                }\n            }\n        };\n\n    // copy\n    exec(success, fail, \"File\", \"moveTo\", [srcURL, parent.toInternalURL(), name]);\n};\n\n/**\n * Copy a directory to a different location.\n *\n * @param parent\n *            {DirectoryEntry} the directory to which to copy the entry\n * @param newName\n *            {DOMString} new name of the entry, defaults to the current name\n * @param successCallback\n *            {Function} called with the new Entry object\n * @param errorCallback\n *            {Function} called with a FileError\n */\nEntry.prototype.copyTo = function(parent, newName, successCallback, errorCallback) {\n    argscheck.checkArgs('oSFF', 'Entry.copyTo', arguments);\n    var fail = errorCallback && function(code) {\n        errorCallback(new FileError(code));\n    };\n    var srcURL = this.toInternalURL(),\n        // entry name\n        name = newName || this.name,\n        // success callback\n        success = function(entry) {\n            if (entry) {\n                if (successCallback) {\n                    // create appropriate Entry object\n                    var newFSName = entry.filesystemName || (entry.filesystem && entry.filesystem.name);\n                    var fs = newFSName ? new FileSystem(newFSName, { name: \"\", fullPath: \"/\" }) : new FileSystem(parent.filesystem.name, { name: \"\", fullPath: \"/\" });\n                    var result = (entry.isDirectory) ? new (require('./DirectoryEntry'))(entry.name, entry.fullPath, fs, entry.nativeURL) : new (require('cordova-plugin-file.FileEntry'))(entry.name, entry.fullPath, fs, entry.nativeURL);\n                    successCallback(result);\n                }\n            }\n            else {\n                // no Entry object returned\n                if (fail) {\n                    fail(FileError.NOT_FOUND_ERR);\n                }\n            }\n        };\n\n    // copy\n    exec(success, fail, \"File\", \"copyTo\", [srcURL, parent.toInternalURL(), name]);\n};\n\n/**\n * Return a URL that can be passed across the bridge to identify this entry.\n */\nEntry.prototype.toInternalURL = function() {\n    if (this.filesystem && this.filesystem.__format__) {\n      return this.filesystem.__format__(this.fullPath, this.nativeURL);\n    }\n};\n\n/**\n * Return a URL that can be used to identify this entry.\n * Use a URL that can be used to as the src attribute of a <video> or\n * <audio> tag. If that is not possible, construct a cdvfile:// URL.\n */\nEntry.prototype.toURL = function() {\n    if (this.nativeURL) {\n      return this.nativeURL;\n    }\n    // fullPath attribute may contain the full URL in the case that\n    // toInternalURL fails.\n    return this.toInternalURL() || \"file://localhost\" + this.fullPath;\n};\n\n/**\n * Backwards-compatibility: In v1.0.0 - 1.0.2, .toURL would only return a\n * cdvfile:// URL, and this method was necessary to obtain URLs usable by the\n * webview.\n * See CB-6051, CB-6106, CB-6117, CB-6152, CB-6199, CB-6201, CB-6243, CB-6249,\n * and CB-6300.\n */\nEntry.prototype.toNativeURL = function() {\n    console.log(\"DEPRECATED: Update your code to use 'toURL'\");\n    return this.toURL();\n};\n\n/**\n * Returns a URI that can be used to identify this entry.\n *\n * @param {DOMString} mimeType for a FileEntry, the mime type to be used to interpret the file, when loaded through this URI.\n * @return uri\n */\nEntry.prototype.toURI = function(mimeType) {\n    console.log(\"DEPRECATED: Update your code to use 'toURL'\");\n    return this.toURL();\n};\n\n/**\n * Remove a file or directory. It is an error to attempt to delete a\n * directory that is not empty. It is an error to attempt to delete a\n * root directory of a file system.\n *\n * @param successCallback {Function} called with no parameters\n * @param errorCallback {Function} called with a FileError\n */\nEntry.prototype.remove = function(successCallback, errorCallback) {\n    argscheck.checkArgs('FF', 'Entry.remove', arguments);\n    var fail = errorCallback && function(code) {\n        errorCallback(new FileError(code));\n    };\n    exec(successCallback, fail, \"File\", \"remove\", [this.toInternalURL()]);\n};\n\n/**\n * Look up the parent DirectoryEntry of this entry.\n *\n * @param successCallback {Function} called with the parent DirectoryEntry object\n * @param errorCallback {Function} called with a FileError\n */\nEntry.prototype.getParent = function(successCallback, errorCallback) {\n    argscheck.checkArgs('FF', 'Entry.getParent', arguments);\n    var fs = this.filesystem;\n    var win = successCallback && function(result) {\n        var DirectoryEntry = require('./DirectoryEntry');\n        var entry = new DirectoryEntry(result.name, result.fullPath, fs, result.nativeURL);\n        successCallback(entry);\n    };\n    var fail = errorCallback && function(code) {\n        errorCallback(new FileError(code));\n    };\n    exec(win, fail, \"File\", \"getParent\", [this.toInternalURL()]);\n};\n\nmodule.exports = Entry;\n\n});\n"],"sourceRoot":"/source/"}