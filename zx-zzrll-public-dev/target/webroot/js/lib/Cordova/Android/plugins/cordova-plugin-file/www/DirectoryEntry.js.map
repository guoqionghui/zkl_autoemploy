{"version":3,"sources":["js/lib/Cordova/Android/plugins/cordova-plugin-file/www/DirectoryEntry.js"],"names":["cordova","define","require","exports","module","argscheck","utils","exec","Entry","FileError","DirectoryReader","DirectoryEntry","name","fullPath","fileSystem","nativeURL","test","__super__","constructor","call","this","extend","prototype","createReader","toInternalURL","getDirectory","path","options","successCallback","errorCallback","checkArgs","arguments","fs","filesystem","win","result","entry","fail","code","removeRecursively","getFile","FileEntry"],"mappings":"AAAAA,QAAQC,OAAO,qCAAsC,SAASC,EAASC,EAASC,GAsBhF,GAAIC,GAAYH,EAAQ,qBACpBI,EAAQJ,EAAQ,iBAChBK,EAAOL,EAAQ,gBACfM,EAAQN,EAAQ,WAChBO,EAAYP,EAAQ,eACpBQ,EAAkBR,EAAQ,qBAW1BS,EAAiB,SAASC,EAAMC,EAAUC,EAAYC,GAGlD,IAAe,MAAMC,KAAKH,KAC1BA,GAAY,KAGZE,IAAc,MAAMC,KAAKD,KACzBA,GAAa,KAEjBJ,EAAeM,UAAUC,YAAYC,KAAKC,MAAM,GAAO,EAAMR,EAAMC,EAAUC,EAAYC,GAG7FT,GAAMe,OAAOV,EAAgBH,GAK7BG,EAAeW,UAAUC,aAAe,WACpC,MAAO,IAAIb,GAAgBU,KAAKI,kBAWpCb,EAAeW,UAAUG,aAAe,SAASC,EAAMC,EAASC,EAAiBC,GAC7ExB,EAAUyB,UAAU,OAAQ,8BAA+BC,UAC3D,IAAIC,GAAKZ,KAAKa,WACVC,EAAMN,GAAmB,SAASO,GAClC,GAAIC,GAAQ,GAAIzB,GAAewB,EAAOvB,KAAMuB,EAAOtB,SAAUmB,EAAIG,EAAOpB,UACxEa,GAAgBQ,IAEhBC,EAAOR,GAAiB,SAASS,GACjCT,EAAc,GAAIpB,GAAU6B,IAEhC/B,GAAK2B,EAAKG,EAAM,OAAQ,gBAAiBjB,KAAKI,gBAAiBE,EAAMC,KASzEhB,EAAeW,UAAUiB,kBAAoB,SAASX,EAAiBC,GACnExB,EAAUyB,UAAU,KAAM,mCAAoCC,UAC9D,IAAIM,GAAOR,GAAiB,SAASS,GACjCT,EAAc,GAAIpB,GAAU6B,IAEhC/B,GAAKqB,EAAiBS,EAAM,OAAQ,qBAAsBjB,KAAKI,mBAWnEb,EAAeW,UAAUkB,QAAU,SAASd,EAAMC,EAASC,EAAiBC,GACxExB,EAAUyB,UAAU,OAAQ,yBAA0BC,UACtD,IAAIC,GAAKZ,KAAKa,WACVC,EAAMN,GAAmB,SAASO,GAClC,GAAIM,GAAYvC,EAAQ,eACpBkC,EAAQ,GAAIK,GAAUN,EAAOvB,KAAMuB,EAAOtB,SAAUmB,EAAIG,EAAOpB,UACnEa,GAAgBQ,IAEhBC,EAAOR,GAAiB,SAASS,GACjCT,EAAc,GAAIpB,GAAU6B,IAEhC/B,GAAK2B,EAAKG,EAAM,OAAQ,WAAYjB,KAAKI,gBAAiBE,EAAMC,KAGpEvB,EAAOD,QAAUQ","file":"js/lib/Cordova/Android/plugins/cordova-plugin-file/www/DirectoryEntry.js","sourcesContent":["cordova.define(\"cordova-plugin-file.DirectoryEntry\", function(require, exports, module) {\n/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar argscheck = require('cordova/argscheck'),\n    utils = require('cordova/utils'),\n    exec = require('cordova/exec'),\n    Entry = require('./Entry'),\n    FileError = require('./FileError'),\n    DirectoryReader = require('./DirectoryReader');\n\n/**\n * An interface representing a directory on the file system.\n *\n * {boolean} isFile always false (readonly)\n * {boolean} isDirectory always true (readonly)\n * {DOMString} name of the directory, excluding the path leading to it (readonly)\n * {DOMString} fullPath the absolute full path to the directory (readonly)\n * {FileSystem} filesystem on which the directory resides (readonly)\n */\nvar DirectoryEntry = function(name, fullPath, fileSystem, nativeURL) {\n\n    // add trailing slash if it is missing\n    if ((fullPath) && !/\\/$/.test(fullPath)) {\n        fullPath += \"/\";\n    }\n    // add trailing slash if it is missing\n    if (nativeURL && !/\\/$/.test(nativeURL)) {\n        nativeURL += \"/\";\n    }\n    DirectoryEntry.__super__.constructor.call(this, false, true, name, fullPath, fileSystem, nativeURL);\n};\n\nutils.extend(DirectoryEntry, Entry);\n\n/**\n * Creates a new DirectoryReader to read entries from this directory\n */\nDirectoryEntry.prototype.createReader = function() {\n    return new DirectoryReader(this.toInternalURL());\n};\n\n/**\n * Creates or looks up a directory\n *\n * @param {DOMString} path either a relative or absolute path from this directory in which to look up or create a directory\n * @param {Flags} options to create or exclusively create the directory\n * @param {Function} successCallback is called with the new entry\n * @param {Function} errorCallback is called with a FileError\n */\nDirectoryEntry.prototype.getDirectory = function(path, options, successCallback, errorCallback) {\n    argscheck.checkArgs('sOFF', 'DirectoryEntry.getDirectory', arguments);\n    var fs = this.filesystem;\n    var win = successCallback && function(result) {\n        var entry = new DirectoryEntry(result.name, result.fullPath, fs, result.nativeURL);\n        successCallback(entry);\n    };\n    var fail = errorCallback && function(code) {\n        errorCallback(new FileError(code));\n    };\n    exec(win, fail, \"File\", \"getDirectory\", [this.toInternalURL(), path, options]);\n};\n\n/**\n * Deletes a directory and all of it's contents\n *\n * @param {Function} successCallback is called with no parameters\n * @param {Function} errorCallback is called with a FileError\n */\nDirectoryEntry.prototype.removeRecursively = function(successCallback, errorCallback) {\n    argscheck.checkArgs('FF', 'DirectoryEntry.removeRecursively', arguments);\n    var fail = errorCallback && function(code) {\n        errorCallback(new FileError(code));\n    };\n    exec(successCallback, fail, \"File\", \"removeRecursively\", [this.toInternalURL()]);\n};\n\n/**\n * Creates or looks up a file\n *\n * @param {DOMString} path either a relative or absolute path from this directory in which to look up or create a file\n * @param {Flags} options to create or exclusively create the file\n * @param {Function} successCallback is called with the new entry\n * @param {Function} errorCallback is called with a FileError\n */\nDirectoryEntry.prototype.getFile = function(path, options, successCallback, errorCallback) {\n    argscheck.checkArgs('sOFF', 'DirectoryEntry.getFile', arguments);\n    var fs = this.filesystem;\n    var win = successCallback && function(result) {\n        var FileEntry = require('./FileEntry');\n        var entry = new FileEntry(result.name, result.fullPath, fs, result.nativeURL);\n        successCallback(entry);\n    };\n    var fail = errorCallback && function(code) {\n        errorCallback(new FileError(code));\n    };\n    exec(win, fail, \"File\", \"getFile\", [this.toInternalURL(), path, options]);\n};\n\nmodule.exports = DirectoryEntry;\n\n});\n"],"sourceRoot":"/source/"}