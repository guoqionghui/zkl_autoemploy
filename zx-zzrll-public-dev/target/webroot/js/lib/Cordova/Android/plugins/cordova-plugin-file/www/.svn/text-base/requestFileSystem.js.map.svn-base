{"version":3,"sources":["js/lib/Cordova/Android/plugins/cordova-plugin-file/www/requestFileSystem.js"],"names":["cordova","define","require","exports","module","checkBrowser","platformId","window","requestFileSystem","webkitRequestFileSystem","argscheck","FileError","FileSystem","exec","fileSystems","type","size","successCallback","errorCallback","checkArgs","arguments","fail","code","SYNTAX_ERR","success","file_system","getFs","name","fs","root","NOT_FOUND_ERR"],"mappings":"AAAAA,QAAQC,OAAO,wCAAyC,SAASC,EAASC,EAASC,IAsBnF,WAEI,QAASC,KACL,QAA2B,YAAvBL,QAAQM,aAA4BJ,EAAQ,mBAC5CE,EAAOD,QAAUI,OAAOC,mBAAqBD,OAAOE,yBAC7C,GAIf,IAAIJ,IAAJ,CAIA,GAAIK,GAAYR,EAAQ,qBACpBS,EAAYT,EAAQ,eACpBU,EAAaV,EAAQ,gBACrBW,EAAOX,EAAQ,gBACfY,EAAcZ,EAAQ,iBAStBM,EAAoB,SAASO,EAAMC,EAAMC,EAAiBC,GAC1DR,EAAUS,UAAU,OAAQ,oBAAqBC,UACjD,IAAIC,GAAO,SAASC,GACZJ,GACAA,EAAc,GAAIP,GAAUW,IAIpC,IAAIP,EAAO,EACPM,EAAKV,EAAUY,gBACZ,CAEH,GAAIC,GAAU,SAASC,GACfA,EACIR,GACAH,EAAYY,MAAMD,EAAYE,KAAM,SAASC,GAEpCA,IACDA,EAAK,GAAIhB,GAAWa,EAAYE,KAAMF,EAAYI,OAEtDZ,EAAgBW,KAMxBP,EAAKV,EAAUmB,eAGvBjB,GAAKW,EAASH,EAAM,OAAQ,qBAAsBN,EAAMC,KAIhEZ,GAAOD,QAAUK","file":"js/lib/Cordova/Android/plugins/cordova-plugin-file/www/requestFileSystem.js","sourcesContent":["cordova.define(\"cordova-plugin-file.requestFileSystem\", function(require, exports, module) {\n/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n(function() {\n    //For browser platform: not all browsers use this file.\n    function checkBrowser() {\n        if (cordova.platformId === \"browser\" && require('./isChrome')()) {\n            module.exports = window.requestFileSystem || window.webkitRequestFileSystem;\n            return true;\n        }\n        return false;\n    }\n    if (checkBrowser()) {\n        return;\n    }\n\n    var argscheck = require('cordova/argscheck'),\n        FileError = require('./FileError'),\n        FileSystem = require('./FileSystem'),\n        exec = require('cordova/exec');\n    var fileSystems = require('./fileSystems');\n\n    /**\n     * Request a file system in which to store application data.\n     * @param type  local file system type\n     * @param size  indicates how much storage space, in bytes, the application expects to need\n     * @param successCallback  invoked with a FileSystem object\n     * @param errorCallback  invoked if error occurs retrieving file system\n     */\n    var requestFileSystem = function(type, size, successCallback, errorCallback) {\n        argscheck.checkArgs('nnFF', 'requestFileSystem', arguments);\n        var fail = function(code) {\n            if (errorCallback) {\n                errorCallback(new FileError(code));\n            }\n        };\n\n        if (type < 0) {\n            fail(FileError.SYNTAX_ERR);\n        } else {\n            // if successful, return a FileSystem object\n            var success = function(file_system) {\n                if (file_system) {\n                    if (successCallback) {\n                        fileSystems.getFs(file_system.name, function(fs) {\n                            // This should happen only on platforms that haven't implemented requestAllFileSystems (windows)\n                            if (!fs) {\n                                fs = new FileSystem(file_system.name, file_system.root);\n                            }\n                            successCallback(fs);\n                        });\n                    }\n                }\n                else {\n                    // no FileSystem object returned\n                    fail(FileError.NOT_FOUND_ERR);\n                }\n            };\n            exec(success, fail, \"File\", \"requestFileSystem\", [type, size]);\n        }\n    };\n\n    module.exports = requestFileSystem;\n})();\n\n});\n"],"sourceRoot":"/source/"}