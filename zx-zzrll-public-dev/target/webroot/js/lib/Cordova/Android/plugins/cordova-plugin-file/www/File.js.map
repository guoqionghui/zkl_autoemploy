{"version":3,"sources":["js/lib/Cordova/Android/plugins/cordova-plugin-file/www/File.js"],"names":["cordova","define","require","exports","module","File","name","localURL","type","lastModifiedDate","size","this","lastModified","start","end","prototype","slice","newStart","newEnd","arguments","length","Math","max","min","newFile"],"mappings":"AAAAA,QAAQC,OAAO,2BAA4B,SAASC,EAASC,EAASC,GA+BtE,GAAIC,GAAO,SAASC,EAAMC,EAAUC,EAAMC,EAAkBC,GACxDC,KAAKL,KAAOA,GAAQ,GACpBK,KAAKJ,SAAWA,GAAY,KAC5BI,KAAKH,KAAOA,GAAQ,KACpBG,KAAKC,aAAeH,GAAoB,KAExCE,KAAKF,iBAAmBA,GAAoB,KAC5CE,KAAKD,KAAOA,GAAQ,EAGpBC,KAAKE,MAAQ,EACbF,KAAKG,IAAMH,KAAKD,KAUpBL,GAAKU,UAAUC,MAAQ,SAASH,EAAOC,GACnC,GAAIJ,GAAOC,KAAKG,IAAMH,KAAKE,MACvBI,EAAW,EACXC,EAASR,CACTS,WAAUC,SAENH,EADAJ,EAAQ,EACGQ,KAAKC,IAAIZ,EAAOG,EAAO,GAEvBQ,KAAKE,IAAIb,EAAMG,IAI9BM,UAAUC,QAAU,IAEhBF,EADAJ,EAAM,EACGO,KAAKC,IAAIZ,EAAOI,EAAK,GAErBO,KAAKE,IAAIT,EAAKJ,GAI/B,IAAIc,GAAU,GAAInB,GAAKM,KAAKL,KAAMK,KAAKJ,SAAUI,KAAKH,KAAMG,KAAKC,aAAcD,KAAKD,KAGpF,OAFAc,GAAQX,MAAQF,KAAKE,MAAQI,EAC7BO,EAAQV,IAAMH,KAAKE,MAAQK,EACpBM,GAIXpB,EAAOD,QAAUE","file":"js/lib/Cordova/Android/plugins/cordova-plugin-file/www/File.js","sourcesContent":["cordova.define(\"cordova-plugin-file.File\", function(require, exports, module) {\n/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/**\n * Constructor.\n * name {DOMString} name of the file, without path information\n * fullPath {DOMString} the full path of the file, including the name\n * type {DOMString} mime type\n * lastModifiedDate {Date} last modified date\n * size {Number} size of the file in bytes\n */\n\nvar File = function(name, localURL, type, lastModifiedDate, size){\n    this.name = name || '';\n    this.localURL = localURL || null;\n    this.type = type || null;\n    this.lastModified = lastModifiedDate || null;\n    // For backwards compatibility, store the timestamp in lastModifiedDate as well\n    this.lastModifiedDate = lastModifiedDate || null;\n    this.size = size || 0;\n\n    // These store the absolute start and end for slicing the file.\n    this.start = 0;\n    this.end = this.size;\n};\n\n/**\n * Returns a \"slice\" of the file. Since Cordova Files don't contain the actual\n * content, this really returns a File with adjusted start and end.\n * Slices of slices are supported.\n * start {Number} The index at which to start the slice (inclusive).\n * end {Number} The index at which to end the slice (exclusive).\n */\nFile.prototype.slice = function(start, end) {\n    var size = this.end - this.start;\n    var newStart = 0;\n    var newEnd = size;\n    if (arguments.length) {\n        if (start < 0) {\n            newStart = Math.max(size + start, 0);\n        } else {\n            newStart = Math.min(size, start);\n        }\n    }\n\n    if (arguments.length >= 2) {\n        if (end < 0) {\n            newEnd = Math.max(size + end, 0);\n        } else {\n            newEnd = Math.min(end, size);\n        }\n    }\n\n    var newFile = new File(this.name, this.localURL, this.type, this.lastModified, this.size);\n    newFile.start = this.start + newStart;\n    newFile.end = this.start + newEnd;\n    return newFile;\n};\n\n\nmodule.exports = File;\n\n});\n"],"sourceRoot":"/source/"}