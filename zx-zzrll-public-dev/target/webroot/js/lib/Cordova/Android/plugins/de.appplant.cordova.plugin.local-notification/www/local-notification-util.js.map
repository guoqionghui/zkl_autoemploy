{"version":3,"sources":["js/lib/Cordova/Android/plugins/de.appplant.cordova.plugin.local-notification/www/local-notification-util.js"],"names":["cordova","define","require","exports","module","exec","channel","_defaults","text","title","sound","badge","id","data","undefined","every","at","_listener","_registered","applyPlatformSpecificOptions","defaults","this","device","platform","icon","smallIcon","ongoing","autoClear","led","color","mergeWithDefaults","options","getDefaults","getValueFor","hasOwnProperty","Date","key","indexOf","console","warn","convertProperties","isNaN","Number","toString","getTime","Math","round","JSON","stringify","warning","createCallbackFn","callbackFn","scope","apply","arguments","convertIds","ids","convertedIds","i","length","push","keys","Array","slice","fireEvent","event","args","listener","fn","action","callback","params","isArray","deviceready","subscribe","onCordovaReady","onCordovaInfoReady"],"mappings":"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","file":"js/lib/Cordova/Android/plugins/de.appplant.cordova.plugin.local-notification/www/local-notification-util.js","sourcesContent":["cordova.define(\"de.appplant.cordova.plugin.local-notification.LocalNotification.Util\", function(require, exports, module) {\n/*\n * Copyright (c) 2013-2015 by appPlant UG. All rights reserved.\n *\n * @APPPLANT_LICENSE_HEADER_START@\n *\n * This file contains Original Code and/or Modifications of Original Code\n * as defined in and that are subject to the Apache License\n * Version 2.0 (the 'License'). You may not use this file except in\n * compliance with the License. Please obtain a copy of the License at\n * http://opensource.org/licenses/Apache-2.0/ and read it before using this\n * file.\n *\n * The Original Code and all software distributed under the License are\n * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER\n * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,\n * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.\n * Please see the License for the specific language governing rights and\n * limitations under the License.\n *\n * @APPPLANT_LICENSE_HEADER_END@\n */\n\nvar exec    = require('cordova/exec'),\n    channel = require('cordova/channel');\n\n\n/***********\n * MEMBERS *\n ***********/\n\n// Default values\nexports._defaults = {\n    text:  '',\n    title: '',\n    sound: 'res://platform_default',\n    badge: 0,\n    id:    0,\n    data:  undefined,\n    every: undefined,\n    at:    undefined\n};\n\n// listener\nexports._listener = {};\n\n// Registered permission flag\nexports._registered = false;\n\n\n/********\n * UTIL *\n ********/\n\n/**\n * Merge platform specific properties into the default ones.\n *\n * @return {Object}\n *      The default properties for the platform\n */\nexports.applyPlatformSpecificOptions = function () {\n    var defaults = this._defaults;\n\n    switch (device.platform) {\n    case 'Android':\n        defaults.icon      = 'res://ic_popup_reminder';\n        defaults.smallIcon = undefined;\n        defaults.ongoing   = false;\n        defaults.autoClear = true;\n        defaults.led       = 'FF0000';\n        defaults.color     = undefined;\n        break;\n    }\n\n    return defaults;\n};\n\n/**\n * Merge custom properties with the default values.\n *\n * @param {Object} options\n *      Set of custom values\n *\n * @retrun {Object}\n *      The merged property list\n */\nexports.mergeWithDefaults = function (options) {\n    var defaults = this.getDefaults();\n\n    options.at   = this.getValueFor(options, 'at', 'firstAt', 'date');\n    options.text = this.getValueFor(options, 'text', 'message');\n    options.data = this.getValueFor(options, 'data', 'json');\n\n    if (defaults.hasOwnProperty('autoClear')) {\n        options.autoClear = this.getValueFor(options, 'autoClear', 'autoCancel');\n    }\n\n    if (options.autoClear !== true && options.ongoing) {\n        options.autoClear = false;\n    }\n\n    if (options.at === undefined || options.at === null) {\n        options.at = new Date();\n    }\n\n    for (var key in defaults) {\n        if (options[key] === null || options[key] === undefined) {\n            if (options.hasOwnProperty(key) && ['data','sound'].indexOf(key) > -1) {\n                options[key] = undefined;\n            } else {\n                options[key] = defaults[key];\n            }\n        }\n    }\n\n    for (key in options) {\n        if (!defaults.hasOwnProperty(key)) {\n            delete options[key];\n            console.warn('Unknown property: ' + key);\n        }\n    }\n\n    return options;\n};\n\n/**\n * Convert the passed values to their required type.\n *\n * @param {Object} options\n *      Set of custom values\n *\n * @retrun {Object}\n *      The converted property list\n */\nexports.convertProperties = function (options) {\n\n    if (options.id) {\n        if (isNaN(options.id)) {\n            options.id = this.getDefaults().id;\n            console.warn('Id is not a number: ' + options.id);\n        } else {\n            options.id = Number(options.id);\n        }\n    }\n\n    if (options.title) {\n        options.title = options.title.toString();\n    }\n\n    if (options.text) {\n        options.text  = options.text.toString();\n    }\n\n    if (options.badge) {\n        if (isNaN(options.badge)) {\n            options.badge = this.getDefaults().badge;\n            console.warn('Badge number is not a number: ' + options.id);\n        } else {\n            options.badge = Number(options.badge);\n        }\n    }\n\n    if (options.at) {\n        if (typeof options.at == 'object') {\n            options.at = options.at.getTime();\n        }\n\n        options.at = Math.round(options.at/1000);\n    }\n\n    if (typeof options.data == 'object') {\n        options.data = JSON.stringify(options.data);\n    }\n\n    if (options.every) {\n        if (device.platform == 'iOS' && typeof options.every != 'string') {\n            options.every = this.getDefaults().every;\n            var warning = 'Every option is not a string: ' + options.id;\n            warning += '. Expects one of: second, minute, hour, day, week, ';\n            warning += 'month, year on iOS.';\n            console.warn(warning);\n        }\n    }\n\n    return options;\n};\n\n/**\n * Create callback, which will be executed within a specific scope.\n *\n * @param {Function} callbackFn\n *      The callback function\n * @param {Object} scope\n *      The scope for the function\n *\n * @return {Function}\n *      The new callback function\n */\nexports.createCallbackFn = function (callbackFn, scope) {\n\n    if (typeof callbackFn != 'function')\n        return;\n\n    return function () {\n        callbackFn.apply(scope || this, arguments);\n    };\n};\n\n/**\n * Convert the IDs to numbers.\n *\n * @param {String/Number[]} ids\n *\n * @return Array of Numbers\n */\nexports.convertIds = function (ids) {\n    var convertedIds = [];\n\n    for (var i = 0; i < ids.length; i++) {\n        convertedIds.push(Number(ids[i]));\n    }\n\n    return convertedIds;\n};\n\n/**\n * First found value for the given keys.\n *\n * @param {Object} options\n *      Object with key-value properties\n * @param {String[]} keys*\n *      Key list\n */\nexports.getValueFor = function (options) {\n    var keys = Array.apply(null, arguments).slice(1);\n\n    for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n\n        if (options.hasOwnProperty(key)) {\n            return options[key];\n        }\n    }\n};\n\n/**\n * Fire event with given arguments.\n *\n * @param {String} event\n *      The event's name\n * @param {args*}\n *      The callback's arguments\n */\nexports.fireEvent = function (event) {\n    var args     = Array.apply(null, arguments).slice(1),\n        listener = this._listener[event];\n\n    if (!listener)\n        return;\n\n    for (var i = 0; i < listener.length; i++) {\n        var fn    = listener[i][0],\n            scope = listener[i][1];\n\n        fn.apply(scope, args);\n    }\n};\n\n/**\n * Execute the native counterpart.\n *\n * @param {String} action\n *      The name of the action\n * @param args[]\n *      Array of arguments\n * @param {Function} callback\n *      The callback function\n * @param {Object} scope\n *      The scope for the function\n */\nexports.exec = function (action, args, callback, scope) {\n    var fn = this.createCallbackFn(callback, scope),\n        params = [];\n\n    if (Array.isArray(args)) {\n        params = args;\n    } else if (args) {\n        params.push(args);\n    }\n\n    exec(fn, null, 'LocalNotification', action, params);\n};\n\n\n/*********\n * HOOKS *\n *********/\n\n// Called after 'deviceready' event\nchannel.deviceready.subscribe(function () {\n    // Device is ready now, the listeners are registered\n    // and all queued events can be executed.\n    exec(null, null, 'LocalNotification', 'deviceready', []);\n});\n\n// Called before 'deviceready' event\nchannel.onCordovaReady.subscribe(function () {\n    // Device plugin is ready now\n    channel.onCordovaInfoReady.subscribe(function () {\n        // Merge platform specifics into defaults\n        exports.applyPlatformSpecificOptions();\n    });\n});\n\n});\n"],"sourceRoot":"/source/"}