{"version":3,"sources":["js/lib/Cordova/Android/plugins/cordova-plugin-camera/www/Camera.js"],"names":["cordova","define","require","exports","module","argscheck","exec","Camera","cameraExport","key","getPicture","successCallback","errorCallback","options","checkArgs","arguments","getValue","quality","destinationType","DestinationType","FILE_URI","sourceType","PictureSourceType","CAMERA","targetWidth","targetHeight","encodingType","EncodingType","JPEG","mediaType","MediaType","PICTURE","allowEdit","correctOrientation","saveToPhotoAlbum","popoverOptions","cameraDirection","Direction","BACK","args","cleanup"],"mappings":"AAAAA,QAAQC,OAAO,+BAAgC,SAASC,EAASC,EAASC,GAsB1E,GAAIC,GAAYH,EAAQ,qBACpBI,EAAOJ,EAAQ,gBACfK,EAASL,EAAQ,YAWjBM,IAGJ,KAAK,GAAIC,KAAOF,GACZC,EAAaC,GAAOF,EAAOE,EAqG/BD,GAAaE,WAAa,SAASC,EAAiBC,EAAeC,GAC/DR,EAAUS,UAAU,MAAO,oBAAqBC,WAChDF,EAAUA,KACV,IAAIG,GAAWX,EAAUW,SAErBC,EAAUD,EAASH,EAAQI,QAAS,IACpCC,EAAkBF,EAASH,EAAQK,gBAAiBX,EAAOY,gBAAgBC,UAC3EC,EAAaL,EAASH,EAAQQ,WAAYd,EAAOe,kBAAkBC,QACnEC,EAAcR,EAASH,EAAQW,gBAC/BC,EAAeT,EAASH,EAAQY,iBAChCC,EAAeV,EAASH,EAAQa,aAAcnB,EAAOoB,aAAaC,MAClEC,EAAYb,EAASH,EAAQgB,UAAWtB,EAAOuB,UAAUC,SACzDC,IAAcnB,EAAQmB,UACtBC,IAAuBpB,EAAQoB,mBAC/BC,IAAqBrB,EAAQqB,iBAC7BC,EAAiBnB,EAASH,EAAQsB,eAAgB,MAClDC,EAAkBpB,EAASH,EAAQuB,gBAAiB7B,EAAO8B,UAAUC,MAErEC,GAAQtB,EAASC,EAAiBG,EAAYG,EAAaC,EAAcC,EACjEG,EAAWG,EAAWC,EAAoBC,EAAkBC,EAAgBC,EAExF9B,GAAKK,EAAiBC,EAAe,SAAU,cAAe2B,IA0BlE/B,EAAagC,QAAU,SAAS7B,EAAiBC,GAC7CN,EAAKK,EAAiBC,EAAe,SAAU,eAGnDR,EAAOD,QAAUK","file":"js/lib/Cordova/Android/plugins/cordova-plugin-camera/www/Camera.js","sourcesContent":["cordova.define(\"cordova-plugin-camera.camera\", function(require, exports, module) {\n/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar argscheck = require('cordova/argscheck'),\n    exec = require('cordova/exec'),\n    Camera = require('./Camera');\n    // XXX: commented out\n    //CameraPopoverHandle = require('./CameraPopoverHandle');\n\n/**\n * @namespace navigator\n */\n\n/**\n * @exports camera\n */\nvar cameraExport = {};\n\n// Tack on the Camera Constants to the base camera plugin.\nfor (var key in Camera) {\n    cameraExport[key] = Camera[key];\n}\n\n/**\n * Callback function that provides an error message.\n * @callback module:camera.onError\n * @param {string} message - The message is provided by the device's native code.\n */\n\n/**\n * Callback function that provides the image data.\n * @callback module:camera.onSuccess\n * @param {string} imageData - Base64 encoding of the image data, _or_ the image file URI, depending on [`cameraOptions`]{@link module:camera.CameraOptions} in effect.\n * @example\n * // Show image\n * //\n * function cameraCallback(imageData) {\n *    var image = document.getElementById('myImage');\n *    image.src = \"data:image/jpeg;base64,\" + imageData;\n * }\n */\n\n/**\n * Optional parameters to customize the camera settings.\n * * [Quirks](#CameraOptions-quirks)\n * @typedef module:camera.CameraOptions\n * @type {Object}\n * @property {number} [quality=50] - Quality of the saved image, expressed as a range of 0-100, where 100 is typically full resolution with no loss from file compression. (Note that information about the camera's resolution is unavailable.)\n * @property {module:Camera.DestinationType} [destinationType=FILE_URI] - Choose the format of the return value.\n * @property {module:Camera.PictureSourceType} [sourceType=CAMERA] - Set the source of the picture.\n * @property {Boolean} [allowEdit=true] - Allow simple editing of image before selection.\n * @property {module:Camera.EncodingType} [encodingType=JPEG] - Choose the  returned image file's encoding.\n * @property {number} [targetWidth] - Width in pixels to scale image. Must be used with `targetHeight`. Aspect ratio remains constant.\n * @property {number} [targetHeight] - Height in pixels to scale image. Must be used with `targetWidth`. Aspect ratio remains constant.\n * @property {module:Camera.MediaType} [mediaType=PICTURE] - Set the type of media to select from.  Only works when `PictureSourceType` is `PHOTOLIBRARY` or `SAVEDPHOTOALBUM`.\n * @property {Boolean} [correctOrientation] - Rotate the image to correct for the orientation of the device during capture.\n * @property {Boolean} [saveToPhotoAlbum] - Save the image to the photo album on the device after capture.\n * @property {module:CameraPopoverOptions} [popoverOptions] - iOS-only options that specify popover location in iPad.\n * @property {module:Camera.Direction} [cameraDirection=BACK] - Choose the camera to use (front- or back-facing).\n */\n\n/**\n * @description Takes a photo using the camera, or retrieves a photo from the device's\n * image gallery.  The image is passed to the success callback as a\n * Base64-encoded `String`, or as the URI for the image file.\n *\n * The `camera.getPicture` function opens the device's default camera\n * application that allows users to snap pictures by default - this behavior occurs,\n * when `Camera.sourceType` equals [`Camera.PictureSourceType.CAMERA`]{@link module:Camera.PictureSourceType}.\n * Once the user snaps the photo, the camera application closes and the application is restored.\n *\n * If `Camera.sourceType` is `Camera.PictureSourceType.PHOTOLIBRARY` or\n * `Camera.PictureSourceType.SAVEDPHOTOALBUM`, then a dialog displays\n * that allows users to select an existing image.  The\n * `camera.getPicture` function returns a [`CameraPopoverHandle`]{@link module:CameraPopoverHandle} object,\n * which can be used to reposition the image selection dialog, for\n * example, when the device orientation changes.\n *\n * The return value is sent to the [`cameraSuccess`]{@link module:camera.onSuccess} callback function, in\n * one of the following formats, depending on the specified\n * `cameraOptions`:\n *\n * - A `String` containing the Base64-encoded photo image.\n *\n * - A `String` representing the image file location on local storage (default).\n *\n * You can do whatever you want with the encoded image or URI, for\n * example:\n *\n * - Render the image in an `<img>` tag, as in the example below\n *\n * - Save the data locally (`LocalStorage`, [Lawnchair](http://brianleroux.github.com/lawnchair/), etc.)\n *\n * - Post the data to a remote server\n *\n * __NOTE__: Photo resolution on newer devices is quite good. Photos\n * selected from the device's gallery are not downscaled to a lower\n * quality, even if a `quality` parameter is specified.  To avoid common\n * memory problems, set `Camera.destinationType` to `FILE_URI` rather\n * than `DATA_URL`.\n *\n * __Supported Platforms__\n *\n * - Android\n * - BlackBerry\n * - Browser\n * - Firefox\n * - FireOS\n * - iOS\n * - Windows\n * - WP8\n * - Ubuntu\n *\n * More examples [here](#camera-getPicture-examples). Quirks [here](#camera-getPicture-quirks).\n *\n * @example\n * navigator.camera.getPicture(cameraSuccess, cameraError, cameraOptions);\n * @param {module:camera.onSuccess} successCallback\n * @param {module:camera.onError} errorCallback\n * @param {module:camera.CameraOptions} options CameraOptions\n */\ncameraExport.getPicture = function(successCallback, errorCallback, options) {\n    argscheck.checkArgs('fFO', 'Camera.getPicture', arguments);\n    options = options || {};\n    var getValue = argscheck.getValue;\n\n    var quality = getValue(options.quality, 50);\n    var destinationType = getValue(options.destinationType, Camera.DestinationType.FILE_URI);\n    var sourceType = getValue(options.sourceType, Camera.PictureSourceType.CAMERA);\n    var targetWidth = getValue(options.targetWidth, -1);\n    var targetHeight = getValue(options.targetHeight, -1);\n    var encodingType = getValue(options.encodingType, Camera.EncodingType.JPEG);\n    var mediaType = getValue(options.mediaType, Camera.MediaType.PICTURE);\n    var allowEdit = !!options.allowEdit;\n    var correctOrientation = !!options.correctOrientation;\n    var saveToPhotoAlbum = !!options.saveToPhotoAlbum;\n    var popoverOptions = getValue(options.popoverOptions, null);\n    var cameraDirection = getValue(options.cameraDirection, Camera.Direction.BACK);\n\n    var args = [quality, destinationType, sourceType, targetWidth, targetHeight, encodingType,\n                mediaType, allowEdit, correctOrientation, saveToPhotoAlbum, popoverOptions, cameraDirection];\n\n    exec(successCallback, errorCallback, \"Camera\", \"takePicture\", args);\n    // XXX: commented out\n    //return new CameraPopoverHandle();\n};\n\n/**\n * Removes intermediate image files that are kept in temporary storage\n * after calling [`camera.getPicture`]{@link module:camera.getPicture}. Applies only when the value of\n * `Camera.sourceType` equals `Camera.PictureSourceType.CAMERA` and the\n * `Camera.destinationType` equals `Camera.DestinationType.FILE_URI`.\n *\n * __Supported Platforms__\n *\n * - iOS\n *\n * @example\n * navigator.camera.cleanup(onSuccess, onFail);\n *\n * function onSuccess() {\n *     console.log(\"Camera cleanup success.\")\n * }\n *\n * function onFail(message) {\n *     alert('Failed because: ' + message);\n * }\n */\ncameraExport.cleanup = function(successCallback, errorCallback) {\n    exec(successCallback, errorCallback, \"Camera\", \"cleanup\", []);\n};\n\nmodule.exports = cameraExport;\n\n});\n"],"sourceRoot":"/source/"}