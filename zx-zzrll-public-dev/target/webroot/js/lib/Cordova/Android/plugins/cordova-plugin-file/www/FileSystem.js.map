{"version":3,"sources":["js/lib/Cordova/Android/plugins/cordova-plugin-file/www/FileSystem.js"],"names":["cordova","define","require","exports","module","DirectoryEntry","FileSystem","name","root","this","fullPath","nativeURL","prototype","__format__","nativeUrl","toJSON","encodeURIPath","path","encodeURI","replace"],"mappings":"AAAAA,QAAQC,OAAO,iCAAkC,SAASC,EAASC,EAASC,GAsB5E,GAAIC,GAAiBH,EAAQ,oBASzBI,EAAa,SAASC,EAAMC,GAC5BC,KAAKF,KAAOA,EACRC,EACAC,KAAKD,KAAO,GAAIH,GAAeG,EAAKD,KAAMC,EAAKE,SAAUD,KAAMD,EAAKG,WAEpEF,KAAKD,KAAO,GAAIH,GAAeI,KAAKF,KAAM,IAAKE,MAIvDH,GAAWM,UAAUC,WAAa,SAASH,EAAUI,GACjD,MAAOJ,IAGXJ,EAAWM,UAAUG,OAAS,WAC1B,MAAO,gBAAkBN,KAAKF,KAAO,KAIzCD,EAAWU,cAAgB,SAASC,GAGhC,MAAOC,WAAUD,GAAME,QAAQ,KAAM,QAGzCf,EAAOD,QAAUG","file":"js/lib/Cordova/Android/plugins/cordova-plugin-file/www/FileSystem.js","sourcesContent":["cordova.define(\"cordova-plugin-file.FileSystem\", function(require, exports, module) {\n/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar DirectoryEntry = require('./DirectoryEntry');\n\n/**\n * An interface representing a file system\n *\n * @constructor\n * {DOMString} name the unique name of the file system (readonly)\n * {DirectoryEntry} root directory of the file system (readonly)\n */\nvar FileSystem = function(name, root) {\n    this.name = name;\n    if (root) {\n        this.root = new DirectoryEntry(root.name, root.fullPath, this, root.nativeURL);\n    } else {\n        this.root = new DirectoryEntry(this.name, '/', this);\n    }\n};\n\nFileSystem.prototype.__format__ = function(fullPath, nativeUrl) {\n    return fullPath;\n};\n\nFileSystem.prototype.toJSON = function() {\n    return \"<FileSystem: \" + this.name + \">\";\n};\n\n// Use instead of encodeURI() when encoding just the path part of a URI rather than an entire URI.\nFileSystem.encodeURIPath = function(path) {\n    // Because # is a valid filename character, it must be encoded to prevent part of the\n    // path from being parsed as a URI fragment.\n    return encodeURI(path).replace(/#/g, '%23');\n};\n\nmodule.exports = FileSystem;\n\n});\n"],"sourceRoot":"/source/"}