{"version":3,"sources":["js/lib/Cordova/Android/plugins/de.appplant.cordova.plugin.local-notification/www/local-notification.js"],"names":["cordova","define","require","exports","module","getDefaults","this","core","setDefaults","defaults","schedule","notifications","callback","scope","args","update","clear","ids","clearAll","cancel","cancelAll","isPresent","id","isScheduled","isTriggered","getAllIds","getIds","apply","arguments","getScheduledIds","getTriggeredIds","get","getAll","getScheduled","getAllScheduled","getTriggered","getAllTriggered","hasPermission","registerPermission","add","console","warn","promptForPermission","on","event","un"],"mappings":"AAAAA,QAAQC,OAAO,kEAAmE,SAASC,EAASC,EAASC,GAkC7GD,EAAQE,YAAc,WAClB,MAAOC,MAAKC,KAAKF,eAQrBF,EAAQK,YAAc,SAAUC,GAC5BH,KAAKC,KAAKC,YAAYC,IAgB1BN,EAAQO,SAAW,SAAUC,EAAeC,EAAUC,EAAOC,GACzDR,KAAKC,KAAKG,SAASC,EAAeC,EAAUC,EAAOC,IAgBvDX,EAAQY,OAAS,SAAUJ,EAAeC,EAAUC,EAAOC,GACvDR,KAAKC,KAAKQ,OAAOJ,EAAeC,EAAUC,EAAOC,IAarDX,EAAQa,MAAQ,SAAUC,EAAKL,EAAUC,GACrCP,KAAKC,KAAKS,MAAMC,EAAKL,EAAUC,IAWnCV,EAAQe,SAAW,SAAUN,EAAUC,GACnCP,KAAKC,KAAKW,SAASN,EAAUC,IAajCV,EAAQgB,OAAS,SAAUF,EAAKL,EAAUC,GACtCP,KAAKC,KAAKY,OAAOF,EAAKL,EAAUC,IAWpCV,EAAQiB,UAAY,SAAUR,EAAUC,GACpCP,KAAKC,KAAKa,UAAUR,EAAUC,IAalCV,EAAQkB,UAAY,SAAUC,EAAIV,EAAUC,GACxCP,KAAKC,KAAKc,UAAUC,EAAIV,EAAUC,IAatCV,EAAQoB,YAAc,SAAUD,EAAIV,EAAUC,GAC1CP,KAAKC,KAAKgB,YAAYD,EAAIV,EAAUC,IAaxCV,EAAQqB,YAAc,SAAUF,EAAIV,EAAUC,GAC1CP,KAAKC,KAAKiB,YAAYF,EAAIV,EAAUC,IAWxCV,EAAQsB,UAAY,SAAUb,EAAUC,GACpCP,KAAKC,KAAKkB,UAAUb,EAAUC,IAMlCV,EAAQuB,OAAS,WACbpB,KAAKmB,UAAUE,MAAMrB,KAAMsB,YAW/BzB,EAAQ0B,gBAAkB,SAAUjB,EAAUC,GAC1CP,KAAKC,KAAKsB,gBAAgBjB,EAAUC,IAWxCV,EAAQ2B,gBAAkB,SAAUlB,EAAUC,GAC1CP,KAAKC,KAAKuB,gBAAgBlB,EAAUC,IAcxCV,EAAQ4B,IAAM,WACVzB,KAAKC,KAAKwB,IAAIJ,MAAMrB,KAAKC,KAAMqB,YAWnCzB,EAAQ6B,OAAS,SAAUpB,EAAUC,GACjCP,KAAKC,KAAKyB,OAAOpB,EAAUC,IAc/BV,EAAQ8B,aAAe,WACnB3B,KAAKC,KAAK0B,aAAaN,MAAMrB,KAAKC,KAAMqB,YAW5CzB,EAAQ+B,gBAAkB,SAAUtB,EAAUC,GAC1CP,KAAKC,KAAK2B,gBAAgBtB,EAAUC,IAcxCV,EAAQgC,aAAe,WACnB7B,KAAKC,KAAK4B,aAAaR,MAAMrB,KAAKC,KAAMqB,YAW5CzB,EAAQiC,gBAAkB,SAAUxB,EAAUC,GAC1CP,KAAKC,KAAK6B,gBAAgBxB,EAAUC,IAWxCV,EAAQkC,cAAgB,SAAUzB,EAAUC,GACxCP,KAAKC,KAAK8B,cAAczB,EAAUC,IAWtCV,EAAQmC,mBAAqB,SAAU1B,EAAUC,GAC7CP,KAAKC,KAAK+B,mBAAmB1B,EAAUC,IAW3CV,EAAQoC,IAAM,WACVC,QAAQC,KAAK,gEAEbnC,KAAKI,SAASiB,MAAMrB,KAAMsB,YAO9BzB,EAAQuC,oBAAsB,WAC1BF,QAAQC,KAAK,0EAEbnC,KAAKgC,mBAAmBX,MAAMrB,KAAMsB,YAkBxCzB,EAAQwC,GAAK,SAAUC,EAAOhC,EAAUC,GACpCP,KAAKC,KAAKoC,GAAGC,EAAOhC,EAAUC,IAWlCV,EAAQ0C,GAAK,SAAUD,EAAOhC,GAC1BN,KAAKC,KAAKsC,GAAGD,EAAOhC,EAAUC","file":"js/lib/Cordova/Android/plugins/de.appplant.cordova.plugin.local-notification/www/local-notification.js","sourcesContent":["cordova.define(\"de.appplant.cordova.plugin.local-notification.LocalNotification\", function(require, exports, module) {\n/*\n * Copyright (c) 2013-2015 by appPlant UG. All rights reserved.\n *\n * @APPPLANT_LICENSE_HEADER_START@\n *\n * This file contains Original Code and/or Modifications of Original Code\n * as defined in and that are subject to the Apache License\n * Version 2.0 (the 'License'). You may not use this file except in\n * compliance with the License. Please obtain a copy of the License at\n * http://opensource.org/licenses/Apache-2.0/ and read it before using this\n * file.\n *\n * The Original Code and all software distributed under the License are\n * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER\n * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,\n * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.\n * Please see the License for the specific language governing rights and\n * limitations under the License.\n *\n * @APPPLANT_LICENSE_HEADER_END@\n */\n\n\n/*************\n * INTERFACE *\n *************/\n\n/**\n * Returns the default settings.\n *\n * @return {Object}\n */\nexports.getDefaults = function () {\n    return this.core.getDefaults();\n};\n\n/**\n * Overwrite default settings.\n *\n * @param {Object} defaults\n */\nexports.setDefaults = function (defaults) {\n    this.core.setDefaults(defaults);\n};\n\n/**\n * Schedule a new local notification.\n *\n * @param {Object} notifications\n *      The notification properties\n * @param {Function} callback\n *      A function to be called after the notification has been canceled\n * @param {Object?} scope\n *      The scope for the callback function\n * @param {Object?} args\n *      skipPermission:true schedules the notifications immediatly without\n *                          registering or checking for permission\n */\nexports.schedule = function (notifications, callback, scope, args) {\n    this.core.schedule(notifications, callback, scope, args);\n};\n\n/**\n * Update existing notifications specified by IDs in options.\n *\n * @param {Object} notifications\n *      The notification properties to update\n * @param {Function} callback\n *      A function to be called after the notification has been updated\n * @param {Object?} scope\n *      The scope for the callback function\n * @param {Object?} args\n *      skipPermission:true schedules the notifications immediatly without\n *                          registering or checking for permission\n */\nexports.update = function (notifications, callback, scope, args) {\n    this.core.update(notifications, callback, scope, args);\n};\n\n/**\n * Clear the specified notification.\n *\n * @param {String} id\n *      The ID of the notification\n * @param {Function} callback\n *      A function to be called after the notification has been cleared\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.clear = function (ids, callback, scope) {\n    this.core.clear(ids, callback, scope);\n};\n\n/**\n * Clear all previously sheduled notifications.\n *\n * @param {Function} callback\n *      A function to be called after all notifications have been cleared\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.clearAll = function (callback, scope) {\n    this.core.clearAll(callback, scope);\n};\n\n/**\n * Cancel the specified notifications.\n *\n * @param {String[]} ids\n *      The IDs of the notifications\n * @param {Function} callback\n *      A function to be called after the notifications has been canceled\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.cancel = function (ids, callback, scope) {\n    this.core.cancel(ids, callback, scope);\n};\n\n/**\n * Remove all previously registered notifications.\n *\n * @param {Function} callback\n *      A function to be called after all notifications have been canceled\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.cancelAll = function (callback, scope) {\n    this.core.cancelAll(callback, scope);\n};\n\n/**\n * Check if a notification with an ID is present.\n *\n * @param {String} id\n *      The ID of the notification\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.isPresent = function (id, callback, scope) {\n    this.core.isPresent(id, callback, scope);\n};\n\n/**\n * Check if a notification with an ID is scheduled.\n *\n * @param {String} id\n *      The ID of the notification\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.isScheduled = function (id, callback, scope) {\n    this.core.isScheduled(id, callback, scope);\n};\n\n/**\n * Check if a notification with an ID was triggered.\n *\n * @param {String} id\n *      The ID of the notification\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.isTriggered = function (id, callback, scope) {\n    this.core.isTriggered(id, callback, scope);\n};\n\n/**\n * List all local notification IDs.\n *\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.getAllIds = function (callback, scope) {\n    this.core.getAllIds(callback, scope);\n};\n\n/**\n * Alias for `getAllIds`.\n */\nexports.getIds = function () {\n    this.getAllIds.apply(this, arguments);\n};\n\n/**\n * List all scheduled notification IDs.\n *\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.getScheduledIds = function (callback, scope) {\n    this.core.getScheduledIds(callback, scope);\n};\n\n/**\n * List all triggered notification IDs.\n *\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.getTriggeredIds = function (callback, scope) {\n    this.core.getTriggeredIds(callback, scope);\n};\n\n/**\n * Property list for given local notifications.\n * If called without IDs, all notification will be returned.\n *\n * @param {Number[]?} ids\n *      Set of notification IDs\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.get = function () {\n    this.core.get.apply(this.core, arguments);\n};\n\n/**\n * Property list for all local notifications.\n *\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.getAll = function (callback, scope) {\n    this.core.getAll(callback, scope);\n};\n\n/**\n * Property list for given scheduled notifications.\n * If called without IDs, all notification will be returned.\n *\n * @param {Number[]?} ids\n *      Set of notification IDs\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.getScheduled = function () {\n    this.core.getScheduled.apply(this.core, arguments);\n};\n\n/**\n * Property list for all scheduled notifications.\n *\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.getAllScheduled = function (callback, scope) {\n    this.core.getAllScheduled(callback, scope);\n};\n\n/**\n * Property list for given triggered notifications.\n * If called without IDs, all notification will be returned.\n *\n * @param {Number[]?} ids\n *      Set of notification IDs\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.getTriggered = function () {\n    this.core.getTriggered.apply(this.core, arguments);\n};\n\n/**\n * Property list for all triggered notifications.\n *\n * @param {Function} callback\n *      A callback function to be called with the list\n * @param {Object?} scope\n *      The scope for the callback function\n */\nexports.getAllTriggered = function (callback, scope) {\n    this.core.getAllTriggered(callback, scope);\n};\n\n/**\n * Informs if the app has the permission to show notifications.\n *\n * @param {Function} callback\n *      The function to be exec as the callback\n * @param {Object?} scope\n *      The callback function's scope\n */\nexports.hasPermission = function (callback, scope) {\n    this.core.hasPermission(callback, scope);\n};\n\n/**\n * Register permission to show notifications if not already granted.\n *\n * @param {Function} callback\n *      The function to be exec as the callback\n * @param {Object?} scope\n *      The callback function's scope\n */\nexports.registerPermission = function (callback, scope) {\n    this.core.registerPermission(callback, scope);\n};\n\n\n/****************\n * DEPRECATIONS *\n ****************/\n\n/**\n * Schedule a new local notification.\n */\nexports.add = function () {\n    console.warn('Depreated: Please use `notification.local.schedule` instead.');\n\n    this.schedule.apply(this, arguments);\n};\n\n/**\n * Register permission to show notifications\n * if not already granted.\n */\nexports.promptForPermission = function () {\n    console.warn('Depreated: Please use `notification.local.registerPermission` instead.');\n\n    this.registerPermission.apply(this, arguments);\n};\n\n\n/**********\n * EVENTS *\n **********/\n\n/**\n * Register callback for given event.\n *\n * @param {String} event\n *      The event's name\n * @param {Function} callback\n *      The function to be exec as callback\n * @param {Object?} scope\n *      The callback function's scope\n */\nexports.on = function (event, callback, scope) {\n    this.core.on(event, callback, scope);\n};\n\n/**\n * Unregister callback for given event.\n *\n * @param {String} event\n *      The event's name\n * @param {Function} callback\n *      The function to be exec as callback\n */\nexports.un = function (event, callback) {\n    this.core.un(event, callback, scope);\n};\n\n});\n"],"sourceRoot":"/source/"}