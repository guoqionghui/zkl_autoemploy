{"version":3,"sources":["js/lib/Cordova/Android/plugins/cordova-plugin-file/www/FileEntry.js"],"names":["cordova","define","require","exports","module","utils","exec","Entry","FileWriter","File","FileError","FileEntry","name","fullPath","fileSystem","nativeURL","test","substring","length","__super__","constructor","apply","this","extend","prototype","createWriter","successCallback","errorCallback","file","filePointer","writer","localURL","INVALID_STATE_ERR","toInternalURL","win","f","type","lastModifiedDate","size","fail","code"],"mappings":"AAAAA,QAAQC,OAAO,gCAAiC,SAASC,EAASC,EAASC,GAsB3E,GAAIC,GAAQH,EAAQ,iBAChBI,EAAOJ,EAAQ,gBACfK,EAAQL,EAAQ,WAChBM,EAAaN,EAAQ,gBACrBO,EAAOP,EAAQ,UACfQ,EAAYR,EAAQ,eAWpBS,EAAY,SAASC,EAAMC,EAAUC,EAAYC,GAE7CF,GAAY,MAAMG,KAAKH,KACvBA,EAAWA,EAASI,UAAU,EAAGJ,EAASK,OAAS,IAEnDH,GAAa,MAAMC,KAAKD,KACxBA,EAAYA,EAAUE,UAAU,EAAGF,EAAUG,OAAS,IAG1DP,EAAUQ,UAAUC,YAAYC,MAAMC,OAAO,GAAM,EAAOV,EAAMC,EAAUC,EAAYC,IAG1FV,GAAMkB,OAAOZ,EAAWJ,GAQxBI,EAAUa,UAAUC,aAAe,SAASC,EAAiBC,GACzDL,KAAKM,KAAK,SAASC,GACf,GAAIC,GAAS,GAAItB,GAAWqB,EAEJ,QAApBC,EAAOC,UAAyC,KAApBD,EAAOC,SAC/BJ,GACAA,EAAc,GAAIjB,GAAUA,EAAUsB,oBAGtCN,GACAA,EAAgBI,IAGzBH,IASPhB,EAAUa,UAAUI,KAAO,SAASF,EAAiBC,GACjD,GAAII,GAAWT,KAAKW,gBAChBC,EAAMR,GAAmB,SAASS,GAClC,GAAIP,GAAO,GAAInB,GAAK0B,EAAEvB,KAAMmB,EAAUI,EAAEC,KAAMD,EAAEE,iBAAkBF,EAAEG,KACpEZ,GAAgBE,IAEhBW,EAAOZ,GAAiB,SAASa,GACjCb,EAAc,GAAIjB,GAAU8B,IAEhClC,GAAK4B,EAAKK,EAAM,OAAQ,mBAAoBR,KAIhD3B,EAAOD,QAAUQ","file":"js/lib/Cordova/Android/plugins/cordova-plugin-file/www/FileEntry.js","sourcesContent":["cordova.define(\"cordova-plugin-file.FileEntry\", function(require, exports, module) {\n/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar utils = require('cordova/utils'),\n    exec = require('cordova/exec'),\n    Entry = require('./Entry'),\n    FileWriter = require('./FileWriter'),\n    File = require('./File'),\n    FileError = require('./FileError');\n\n/**\n * An interface representing a file on the file system.\n *\n * {boolean} isFile always true (readonly)\n * {boolean} isDirectory always false (readonly)\n * {DOMString} name of the file, excluding the path leading to it (readonly)\n * {DOMString} fullPath the absolute full path to the file (readonly)\n * {FileSystem} filesystem on which the file resides (readonly)\n */\nvar FileEntry = function(name, fullPath, fileSystem, nativeURL) {\n    // remove trailing slash if it is present\n    if (fullPath && /\\/$/.test(fullPath)) {\n        fullPath = fullPath.substring(0, fullPath.length - 1);\n    }\n    if (nativeURL && /\\/$/.test(nativeURL)) {\n        nativeURL = nativeURL.substring(0, nativeURL.length - 1);\n    }\n\n    FileEntry.__super__.constructor.apply(this, [true, false, name, fullPath, fileSystem, nativeURL]);\n};\n\nutils.extend(FileEntry, Entry);\n\n/**\n * Creates a new FileWriter associated with the file that this FileEntry represents.\n *\n * @param {Function} successCallback is called with the new FileWriter\n * @param {Function} errorCallback is called with a FileError\n */\nFileEntry.prototype.createWriter = function(successCallback, errorCallback) {\n    this.file(function(filePointer) {\n        var writer = new FileWriter(filePointer);\n\n        if (writer.localURL === null || writer.localURL === \"\") {\n            if (errorCallback) {\n                errorCallback(new FileError(FileError.INVALID_STATE_ERR));\n            }\n        } else {\n            if (successCallback) {\n                successCallback(writer);\n            }\n        }\n    }, errorCallback);\n};\n\n/**\n * Returns a File that represents the current state of the file that this FileEntry represents.\n *\n * @param {Function} successCallback is called with the new File object\n * @param {Function} errorCallback is called with a FileError\n */\nFileEntry.prototype.file = function(successCallback, errorCallback) {\n    var localURL = this.toInternalURL();\n    var win = successCallback && function(f) {\n        var file = new File(f.name, localURL, f.type, f.lastModifiedDate, f.size);\n        successCallback(file);\n    };\n    var fail = errorCallback && function(code) {\n        errorCallback(new FileError(code));\n    };\n    exec(win, fail, \"File\", \"getFileMetadata\", [localURL]);\n};\n\n\nmodule.exports = FileEntry;\n\n});\n"],"sourceRoot":"/source/"}