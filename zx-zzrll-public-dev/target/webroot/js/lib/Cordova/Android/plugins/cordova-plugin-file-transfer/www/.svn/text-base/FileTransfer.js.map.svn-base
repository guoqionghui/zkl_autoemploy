{"version":3,"sources":["js/lib/Cordova/Android/plugins/cordova-plugin-file-transfer/www/FileTransfer.js"],"names":["cordova","define","require","exports","module","newProgressEvent","result","pe","ProgressEvent","lengthComputable","loaded","total","getUrlCredentials","urlString","credentialsPattern","credentials","exec","getBasicAuthHeader","header","window","btoa","authHeader","authHeaderValue","name","value","convertHeadersToArray","headers","hasOwnProperty","headerValue","push","toString","argscheck","FileTransferError","idCounter","FileTransfer","this","_id","onprogress","prototype","upload","filePath","server","successCallback","errorCallback","options","trustAllHosts","checkArgs","arguments","fileKey","fileName","mimeType","params","chunkedMode","httpMethod","basicAuthHeader","replace","toUpperCase","platformId","fail","e","error","code","source","target","http_status","body","exception","self","win","download","entry","isDirectory","isFile","fullPath","filesystem","FileSystem","filesystemName","PERSISTENT","nativeURL","abort"],"mappings":"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","file":"js/lib/Cordova/Android/plugins/cordova-plugin-file-transfer/www/FileTransfer.js","sourcesContent":["cordova.define(\"cordova-plugin-file-transfer.FileTransfer\", function(require, exports, module) {\n/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/* global cordova, FileSystem */\n\nvar argscheck = require('cordova/argscheck'),\n    exec = require('cordova/exec'),\n    FileTransferError = require('./FileTransferError'),\n    ProgressEvent = require('cordova-plugin-file.ProgressEvent');\n\nfunction newProgressEvent(result) {\n    var pe = new ProgressEvent();\n    pe.lengthComputable = result.lengthComputable;\n    pe.loaded = result.loaded;\n    pe.total = result.total;\n    return pe;\n}\n\nfunction getUrlCredentials(urlString) {\n    var credentialsPattern = /^https?\\:\\/\\/(?:(?:(([^:@\\/]*)(?::([^@\\/]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?).*$/,\n        credentials = credentialsPattern.exec(urlString);\n\n    return credentials && credentials[1];\n}\n\nfunction getBasicAuthHeader(urlString) {\n    var header =  null;\n\n\n    // This is changed due to MS Windows doesn't support credentials in http uris\n    // so we detect them by regexp and strip off from result url\n    // Proof: http://social.msdn.microsoft.com/Forums/windowsapps/en-US/a327cf3c-f033-4a54-8b7f-03c56ba3203f/windows-foundation-uri-security-problem\n\n    if (window.btoa) {\n        var credentials = getUrlCredentials(urlString);\n        if (credentials) {\n            var authHeader = \"Authorization\";\n            var authHeaderValue = \"Basic \" + window.btoa(credentials);\n\n            header = {\n                name : authHeader,\n                value : authHeaderValue\n            };\n        }\n    }\n\n    return header;\n}\n\nfunction convertHeadersToArray(headers) {\n    var result = [];\n    for (var header in headers) {\n        if (headers.hasOwnProperty(header)) {\n            var headerValue = headers[header];\n            result.push({\n                name: header,\n                value: headerValue.toString()\n            });\n        }\n    }\n    return result;\n}\n\nvar idCounter = 0;\n\n/**\n * FileTransfer uploads a file to a remote server.\n * @constructor\n */\nvar FileTransfer = function() {\n    this._id = ++idCounter;\n    this.onprogress = null; // optional callback\n};\n\n/**\n* Given an absolute file path, uploads a file on the device to a remote server\n* using a multipart HTTP request.\n* @param filePath {String}           Full path of the file on the device\n* @param server {String}             URL of the server to receive the file\n* @param successCallback (Function}  Callback to be invoked when upload has completed\n* @param errorCallback {Function}    Callback to be invoked upon error\n* @param options {FileUploadOptions} Optional parameters such as file name and mimetype\n* @param trustAllHosts {Boolean} Optional trust all hosts (e.g. for self-signed certs), defaults to false\n*/\nFileTransfer.prototype.upload = function(filePath, server, successCallback, errorCallback, options, trustAllHosts) {\n    argscheck.checkArgs('ssFFO*', 'FileTransfer.upload', arguments);\n    // check for options\n    var fileKey = null;\n    var fileName = null;\n    var mimeType = null;\n    var params = null;\n    var chunkedMode = true;\n    var headers = null;\n    var httpMethod = null;\n    var basicAuthHeader = getBasicAuthHeader(server);\n    if (basicAuthHeader) {\n        server = server.replace(getUrlCredentials(server) + '@', '');\n\n        options = options || {};\n        options.headers = options.headers || {};\n        options.headers[basicAuthHeader.name] = basicAuthHeader.value;\n    }\n\n    if (options) {\n        fileKey = options.fileKey;\n        fileName = options.fileName;\n        mimeType = options.mimeType;\n        headers = options.headers;\n        httpMethod = options.httpMethod || \"POST\";\n        if (httpMethod.toUpperCase() == \"PUT\"){\n            httpMethod = \"PUT\";\n        } else {\n            httpMethod = \"POST\";\n        }\n        if (options.chunkedMode !== null || typeof options.chunkedMode != \"undefined\") {\n            chunkedMode = options.chunkedMode;\n        }\n        if (options.params) {\n            params = options.params;\n        }\n        else {\n            params = {};\n        }\n    }\n\n    if (cordova.platformId === \"windowsphone\") {\n        headers = headers && convertHeadersToArray(headers);\n        params = params && convertHeadersToArray(params);\n    }\n\n    var fail = errorCallback && function(e) {\n        var error = new FileTransferError(e.code, e.source, e.target, e.http_status, e.body, e.exception);\n        errorCallback(error);\n    };\n\n    var self = this;\n    var win = function(result) {\n        if (typeof result.lengthComputable != \"undefined\") {\n            if (self.onprogress) {\n                self.onprogress(newProgressEvent(result));\n            }\n        } else {\n            if (successCallback) {\n                successCallback(result);\n            }\n        }\n    };\n    exec(win, fail, 'FileTransfer', 'upload', [filePath, server, fileKey, fileName, mimeType, params, trustAllHosts, chunkedMode, headers, this._id, httpMethod]);\n};\n\n/**\n * Downloads a file form a given URL and saves it to the specified directory.\n * @param source {String}          URL of the server to receive the file\n * @param target {String}         Full path of the file on the device\n * @param successCallback (Function}  Callback to be invoked when upload has completed\n * @param errorCallback {Function}    Callback to be invoked upon error\n * @param trustAllHosts {Boolean} Optional trust all hosts (e.g. for self-signed certs), defaults to false\n * @param options {FileDownloadOptions} Optional parameters such as headers\n */\nFileTransfer.prototype.download = function(source, target, successCallback, errorCallback, trustAllHosts, options) {\n    argscheck.checkArgs('ssFF*', 'FileTransfer.download', arguments);\n    var self = this;\n\n    var basicAuthHeader = getBasicAuthHeader(source);\n    if (basicAuthHeader) {\n        source = source.replace(getUrlCredentials(source) + '@', '');\n\n        options = options || {};\n        options.headers = options.headers || {};\n        options.headers[basicAuthHeader.name] = basicAuthHeader.value;\n    }\n\n    var headers = null;\n    if (options) {\n        headers = options.headers || null;\n    }\n\n    if (cordova.platformId === \"windowsphone\" && headers) {\n        headers = convertHeadersToArray(headers);\n    }\n\n    var win = function(result) {\n        if (typeof result.lengthComputable != \"undefined\") {\n            if (self.onprogress) {\n                return self.onprogress(newProgressEvent(result));\n            }\n        } else if (successCallback) {\n            var entry = null;\n            if (result.isDirectory) {\n                entry = new (require('cordova-plugin-file.DirectoryEntry'))();\n            }\n            else if (result.isFile) {\n                entry = new (require('cordova-plugin-file.FileEntry'))();\n            }\n            entry.isDirectory = result.isDirectory;\n            entry.isFile = result.isFile;\n            entry.name = result.name;\n            entry.fullPath = result.fullPath;\n            entry.filesystem = new FileSystem(result.filesystemName || (result.filesystem == window.PERSISTENT ? 'persistent' : 'temporary'));\n            entry.nativeURL = result.nativeURL;\n            successCallback(entry);\n        }\n    };\n\n    var fail = errorCallback && function(e) {\n        var error = new FileTransferError(e.code, e.source, e.target, e.http_status, e.body, e.exception);\n        errorCallback(error);\n    };\n\n    exec(win, fail, 'FileTransfer', 'download', [source, target, trustAllHosts, this._id, headers]);\n};\n\n/**\n * Aborts the ongoing file transfer on this object. The original error\n * callback for the file transfer will be called if necessary.\n */\nFileTransfer.prototype.abort = function() {\n    exec(null, null, 'FileTransfer', 'abort', [this._id]);\n};\n\nmodule.exports = FileTransfer;\n\n});\n"],"sourceRoot":"/source/"}