{"version":3,"sources":["js/lib/Cordova/Android/plugins/cordova-plugin-file/www/DirectoryReader.js"],"names":["cordova","define","require","exports","module","DirectoryReader","localURL","this","hasReadEntries","exec","FileError","prototype","readEntries","successCallback","errorCallback","reader","win","result","retVal","i","length","entry","isDirectory","isFile","name","fullPath","filesystem","filesystemName","nativeURL","push","fail","code"],"mappings":"AAAAA,QAAQC,OAAO,sCAAuC,SAASC,EAASC,EAASC,GA4BjF,QAASC,GAAgBC,GACrBC,KAAKD,SAAWA,GAAY,KAC5BC,KAAKC,gBAAiB,EAR1B,GAAIC,GAAOP,EAAQ,gBACfQ,EAAYR,EAAQ,cAgBxBG,GAAgBM,UAAUC,YAAc,SAASC,EAAiBC,GAE9D,GAAIP,KAAKC,eAEL,WADAK,MAGJ,IAAIE,GAASR,KACTS,EAAiC,kBAApBH,GAAiC,KAAO,SAASI,GAE9D,IAAK,GADDC,MACKC,EAAE,EAAGA,EAAEF,EAAOG,OAAQD,IAAK,CAChC,GAAIE,GAAQ,IACRJ,GAAOE,GAAGG,YACVD,EAAQ,IAAKnB,EAAQ,qBAEhBe,EAAOE,GAAGI,SACfF,EAAQ,IAAKnB,EAAQ,iBAEzBmB,EAAMC,YAAcL,EAAOE,GAAGG,YAC9BD,EAAME,OAASN,EAAOE,GAAGI,OACzBF,EAAMG,KAAOP,EAAOE,GAAGK,KACvBH,EAAMI,SAAWR,EAAOE,GAAGM,SAC3BJ,EAAMK,WAAa,IAAKxB,EAAQ,iBAAiBe,EAAOE,GAAGQ,gBAC3DN,EAAMO,UAAYX,EAAOE,GAAGS,UAC5BV,EAAOW,KAAKR,GAEhBN,EAAOP,gBAAiB,EACxBK,EAAgBK,IAEhBY,EAAgC,kBAAlBhB,GAA+B,KAAO,SAASiB,GAC7DjB,EAAc,GAAIJ,GAAUqB,IAEhCtB,GAAKO,EAAKc,EAAM,OAAQ,eAAgBvB,KAAKD,YAGjDF,EAAOD,QAAUE","file":"js/lib/Cordova/Android/plugins/cordova-plugin-file/www/DirectoryReader.js","sourcesContent":["cordova.define(\"cordova-plugin-file.DirectoryReader\", function(require, exports, module) {\n/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar exec = require('cordova/exec'),\n    FileError = require('./FileError') ;\n\n/**\n * An interface that lists the files and directories in a directory.\n */\nfunction DirectoryReader(localURL) {\n    this.localURL = localURL || null;\n    this.hasReadEntries = false;\n}\n\n/**\n * Returns a list of entries from a directory.\n *\n * @param {Function} successCallback is called with a list of entries\n * @param {Function} errorCallback is called with a FileError\n */\nDirectoryReader.prototype.readEntries = function(successCallback, errorCallback) {\n    // If we've already read and passed on this directory's entries, return an empty list.\n    if (this.hasReadEntries) {\n        successCallback([]);\n        return;\n    }\n    var reader = this;\n    var win = typeof successCallback !== 'function' ? null : function(result) {\n        var retVal = [];\n        for (var i=0; i<result.length; i++) {\n            var entry = null;\n            if (result[i].isDirectory) {\n                entry = new (require('./DirectoryEntry'))();\n            }\n            else if (result[i].isFile) {\n                entry = new (require('./FileEntry'))();\n            }\n            entry.isDirectory = result[i].isDirectory;\n            entry.isFile = result[i].isFile;\n            entry.name = result[i].name;\n            entry.fullPath = result[i].fullPath;\n            entry.filesystem = new (require('./FileSystem'))(result[i].filesystemName);\n            entry.nativeURL = result[i].nativeURL;\n            retVal.push(entry);\n        }\n        reader.hasReadEntries = true;\n        successCallback(retVal);\n    };\n    var fail = typeof errorCallback !== 'function' ? null : function(code) {\n        errorCallback(new FileError(code));\n    };\n    exec(win, fail, \"File\", \"readEntries\", [this.localURL]);\n};\n\nmodule.exports = DirectoryReader;\n\n});\n"],"sourceRoot":"/source/"}