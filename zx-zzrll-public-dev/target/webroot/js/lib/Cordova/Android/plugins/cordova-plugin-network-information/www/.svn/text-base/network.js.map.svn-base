{"version":3,"sources":["js/lib/Cordova/Android/plugins/cordova-plugin-network-information/www/network.js"],"names":["cordova","define","require","exports","module","NetworkConnection","this","type","exec","channel","utils","platformId","navigator","defineGetter","connection","prototype","getInfo","successCallback","errorCallback","me","timerId","timeout","createSticky","waitForInitialization","onCordovaReady","subscribe","info","setTimeout","fireDocumentEvent","clearTimeout","onCordovaConnectionReady","state","fire","e","console","log"],"mappings":"AAAAA,QAAQC,OAAO,6CAA8C,SAASC,EAASC,EAASC,GAqCxF,QAASC,KACLC,KAAKC,KAAO,UAjBhB,GAAIC,GAAON,EAAQ,gBACfF,EAAUE,EAAQ,WAClBO,EAAUP,EAAQ,mBAClBQ,EAAQR,EAAQ,gBAOO,aAAvBF,EAAQW,YAAgD,mBAAbC,YAC3CF,EAAMG,aAAaD,UAAW,SAAU,WACpC,MAA+B,QAAxBN,KAAKQ,WAAWP,OAc/BF,EAAkBU,UAAUC,QAAU,SAASC,EAAiBC,GAC5DV,EAAKS,EAAiBC,EAAe,gBAAiB,wBAG1D,IAAIC,GAAK,GAAId,GACTe,EAAU,KACVC,EAAU,GAEdZ,GAAQa,aAAa,4BACrBb,EAAQc,sBAAsB,4BAE9Bd,EAAQe,eAAeC,UAAU,WAC7BN,EAAGH,QAAQ,SAASU,GAChBP,EAAGZ,KAAOmB,EACG,SAATA,EAEAN,EAAUO,WAAW,WACjB3B,EAAQ4B,kBAAkB,WAC1BR,EAAU,MACXC,IAGa,OAAZD,IACAS,aAAaT,GACbA,EAAU,MAEdpB,EAAQ4B,kBAAkB,WAIiB,IAA3CnB,EAAQqB,yBAAyBC,OACjCtB,EAAQqB,yBAAyBE,QAGzC,SAAUC,GAGyC,IAA3CxB,EAAQqB,yBAAyBC,OACjCtB,EAAQqB,yBAAyBE,OAErCE,QAAQC,IAAI,0CAA4CF,OAIhE7B,EAAOD,QAAUgB","file":"js/lib/Cordova/Android/plugins/cordova-plugin-network-information/www/network.js","sourcesContent":["cordova.define(\"cordova-plugin-network-information.network\", function(require, exports, module) {\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar exec = require('cordova/exec'),\n    cordova = require('cordova'),\n    channel = require('cordova/channel'),\n    utils = require('cordova/utils');\n\n// Link the onLine property with the Cordova-supplied network info.\n// This works because we clobber the navigator object with our own\n// object in bootstrap.js.\n// Browser platform do not need to define this property, because\n// it is already supported by modern browsers\nif (cordova.platformId !== 'browser' && typeof navigator != 'undefined') {\n    utils.defineGetter(navigator, 'onLine', function() {\n        return this.connection.type != 'none';\n    });\n}\n\nfunction NetworkConnection() {\n    this.type = 'unknown';\n}\n\n/**\n * Get connection info\n *\n * @param {Function} successCallback The function to call when the Connection data is available\n * @param {Function} errorCallback The function to call when there is an error getting the Connection data. (OPTIONAL)\n */\nNetworkConnection.prototype.getInfo = function(successCallback, errorCallback) {\n    exec(successCallback, errorCallback, \"NetworkStatus\", \"getConnectionInfo\", []);\n};\n\nvar me = new NetworkConnection();\nvar timerId = null;\nvar timeout = 500;\n\nchannel.createSticky('onCordovaConnectionReady');\nchannel.waitForInitialization('onCordovaConnectionReady');\n\nchannel.onCordovaReady.subscribe(function() {\n    me.getInfo(function(info) {\n        me.type = info;\n        if (info === \"none\") {\n            // set a timer if still offline at the end of timer send the offline event\n            timerId = setTimeout(function(){\n                cordova.fireDocumentEvent(\"offline\");\n                timerId = null;\n            }, timeout);\n        } else {\n            // If there is a current offline event pending clear it\n            if (timerId !== null) {\n                clearTimeout(timerId);\n                timerId = null;\n            }\n            cordova.fireDocumentEvent(\"online\");\n        }\n\n        // should only fire this once\n        if (channel.onCordovaConnectionReady.state !== 2) {\n            channel.onCordovaConnectionReady.fire();\n        }\n    },\n    function (e) {\n        // If we can't get the network info we should still tell Cordova\n        // to fire the deviceready event.\n        if (channel.onCordovaConnectionReady.state !== 2) {\n            channel.onCordovaConnectionReady.fire();\n        }\n        console.log(\"Error initializing Network Connection: \" + e);\n    });\n});\n\nmodule.exports = me;\n\n});\n"],"sourceRoot":"/source/"}