{"version":3,"sources":["js/lib/Cordova/Android/plugins/cordova-plugin-file/www/FileReader.js"],"names":["cordova","define","require","exports","module","defineEvent","eventName","utils","defineGetterSetter","FileReader","prototype","this","_realReader","value","initRead","reader","file","readyState","LOADING","FileError","INVALID_STATE_ERR","_result","_error","_progress","_readyState","localURL","_localURL","onloadstart","ProgressEvent","target","readSuccessCallback","readType","encoding","offset","totalSize","accumulate","r","DONE","Math","min","READ_CHUNK_SIZE","onprogress","loaded","total","execArgs","splice","exec","bind","readFailureCallback","onload","onloadend","e","onerror","modulemapper","origFileReader","getOriginalSymbol","window","EMPTY","defineGetter","error","result","abort","onabort","readAsText","enc","end","start","readAsDataURL","commaIndex","indexOf","substring","readAsBinaryString","readAsArrayBuffer","resultArray","Uint8Array","set","buffer"],"mappings":"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","file":"js/lib/Cordova/Android/plugins/cordova-plugin-file/www/FileReader.js","sourcesContent":["cordova.define(\"cordova-plugin-file.FileReader\", function(require, exports, module) {\n/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar exec = require('cordova/exec'),\n    modulemapper = require('cordova/modulemapper'),\n    utils = require('cordova/utils'),\n    FileError = require('./FileError'),\n    ProgressEvent = require('./ProgressEvent'),\n    origFileReader = modulemapper.getOriginalSymbol(window, 'FileReader');\n\n/**\n * This class reads the mobile device file system.\n *\n * For Android:\n *      The root directory is the root of the file system.\n *      To read from the SD card, the file name is \"sdcard/my_file.txt\"\n * @constructor\n */\nvar FileReader = function() {\n    this._readyState = 0;\n    this._error = null;\n    this._result = null;\n    this._progress = null;\n    this._localURL = '';\n    this._realReader = origFileReader ? new origFileReader() : {};\n};\n\n/**\n * Defines the maximum size to read at a time via the native API. The default value is a compromise between\n * minimizing the overhead of many exec() calls while still reporting progress frequently enough for large files.\n * (Note attempts to allocate more than a few MB of contiguous memory on the native side are likely to cause\n * OOM exceptions, while the JS engine seems to have fewer problems managing large strings or ArrayBuffers.)\n */\nFileReader.READ_CHUNK_SIZE = 256*1024;\n\n// States\nFileReader.EMPTY = 0;\nFileReader.LOADING = 1;\nFileReader.DONE = 2;\n\nutils.defineGetter(FileReader.prototype, 'readyState', function() {\n    return this._localURL ? this._readyState : this._realReader.readyState;\n});\n\nutils.defineGetter(FileReader.prototype, 'error', function() {\n    return this._localURL ? this._error: this._realReader.error;\n});\n\nutils.defineGetter(FileReader.prototype, 'result', function() {\n    return this._localURL ? this._result: this._realReader.result;\n});\n\nfunction defineEvent(eventName) {\n    utils.defineGetterSetter(FileReader.prototype, eventName, function() {\n        return this._realReader[eventName] || null;\n    }, function(value) {\n        this._realReader[eventName] = value;\n    });\n}\ndefineEvent('onloadstart');    // When the read starts.\ndefineEvent('onprogress');     // While reading (and decoding) file or fileBlob data, and reporting partial file data (progress.loaded/progress.total)\ndefineEvent('onload');         // When the read has successfully completed.\ndefineEvent('onerror');        // When the read has failed (see errors).\ndefineEvent('onloadend');      // When the request has completed (either in success or failure).\ndefineEvent('onabort');        // When the read has been aborted. For instance, by invoking the abort() method.\n\nfunction initRead(reader, file) {\n    // Already loading something\n    if (reader.readyState == FileReader.LOADING) {\n      throw new FileError(FileError.INVALID_STATE_ERR);\n    }\n\n    reader._result = null;\n    reader._error = null;\n    reader._progress = 0;\n    reader._readyState = FileReader.LOADING;\n\n    if (typeof file.localURL == 'string') {\n        reader._localURL = file.localURL;\n    } else {\n        reader._localURL = '';\n        return true;\n    }\n\n    if (reader.onloadstart) {\n        reader.onloadstart(new ProgressEvent(\"loadstart\", {target:reader}));\n    }\n}\n\n/**\n * Callback used by the following read* functions to handle incremental or final success.\n * Must be bound to the FileReader's this along with all but the last parameter,\n * e.g. readSuccessCallback.bind(this, \"readAsText\", \"UTF-8\", offset, totalSize, accumulate)\n * @param readType The name of the read function to call.\n * @param encoding Text encoding, or null if this is not a text type read.\n * @param offset Starting offset of the read.\n * @param totalSize Total number of bytes or chars to read.\n * @param accumulate A function that takes the callback result and accumulates it in this._result.\n * @param r Callback result returned by the last read exec() call, or null to begin reading.\n */\nfunction readSuccessCallback(readType, encoding, offset, totalSize, accumulate, r) {\n    if (this._readyState === FileReader.DONE) {\n        return;\n    }\n\n    if (typeof r !== \"undefined\") {\n        accumulate(r);\n        this._progress = Math.min(this._progress + FileReader.READ_CHUNK_SIZE, totalSize);\n\n        if (typeof this.onprogress === \"function\") {\n            this.onprogress(new ProgressEvent(\"progress\", {loaded:this._progress, total:totalSize}));\n        }\n    }\n\n    if (typeof r === \"undefined\" || this._progress < totalSize) {\n        var execArgs = [\n            this._localURL,\n            offset + this._progress,\n            offset + this._progress + Math.min(totalSize - this._progress, FileReader.READ_CHUNK_SIZE)];\n        if (encoding) {\n            execArgs.splice(1, 0, encoding);\n        }\n        exec(\n            readSuccessCallback.bind(this, readType, encoding, offset, totalSize, accumulate),\n            readFailureCallback.bind(this),\n            \"File\", readType, execArgs);\n    } else {\n        this._readyState = FileReader.DONE;\n\n        if (typeof this.onload === \"function\") {\n            this.onload(new ProgressEvent(\"load\", {target:this}));\n        }\n\n        if (typeof this.onloadend === \"function\") {\n            this.onloadend(new ProgressEvent(\"loadend\", {target:this}));\n        }\n    }\n}\n\n/**\n * Callback used by the following read* functions to handle errors.\n * Must be bound to the FileReader's this, e.g. readFailureCallback.bind(this)\n */\nfunction readFailureCallback(e) {\n    if (this._readyState === FileReader.DONE) {\n        return;\n    }\n\n    this._readyState = FileReader.DONE;\n    this._result = null;\n    this._error = new FileError(e);\n\n    if (typeof this.onerror === \"function\") {\n        this.onerror(new ProgressEvent(\"error\", {target:this}));\n    }\n\n    if (typeof this.onloadend === \"function\") {\n        this.onloadend(new ProgressEvent(\"loadend\", {target:this}));\n    }\n}\n\n/**\n * Abort reading file.\n */\nFileReader.prototype.abort = function() {\n    if (origFileReader && !this._localURL) {\n        return this._realReader.abort();\n    }\n    this._result = null;\n\n    if (this._readyState == FileReader.DONE || this._readyState == FileReader.EMPTY) {\n      return;\n    }\n\n    this._readyState = FileReader.DONE;\n\n    // If abort callback\n    if (typeof this.onabort === 'function') {\n        this.onabort(new ProgressEvent('abort', {target:this}));\n    }\n    // If load end callback\n    if (typeof this.onloadend === 'function') {\n        this.onloadend(new ProgressEvent('loadend', {target:this}));\n    }\n};\n\n/**\n * Read text file.\n *\n * @param file          {File} File object containing file properties\n * @param encoding      [Optional] (see http://www.iana.org/assignments/character-sets)\n */\nFileReader.prototype.readAsText = function(file, encoding) {\n    if (initRead(this, file)) {\n        return this._realReader.readAsText(file, encoding);\n    }\n\n    // Default encoding is UTF-8\n    var enc = encoding ? encoding : \"UTF-8\";\n\n    var totalSize = file.end - file.start;\n    readSuccessCallback.bind(this)(\"readAsText\", enc, file.start, totalSize, function(r) {\n        if (this._progress === 0) {\n            this._result = \"\";\n        }\n        this._result += r;\n    }.bind(this));\n};\n\n\n/**\n * Read file and return data as a base64 encoded data url.\n * A data url is of the form:\n *      data:[<mediatype>][;base64],<data>\n *\n * @param file          {File} File object containing file properties\n */\nFileReader.prototype.readAsDataURL = function(file) {\n    if (initRead(this, file)) {\n        return this._realReader.readAsDataURL(file);\n    }\n\n    var totalSize = file.end - file.start;\n    readSuccessCallback.bind(this)(\"readAsDataURL\", null, file.start, totalSize, function(r) {\n        var commaIndex = r.indexOf(',');\n        if (this._progress === 0) {\n            this._result = r;\n        } else {\n            this._result += r.substring(commaIndex + 1);\n        }\n    }.bind(this));\n};\n\n/**\n * Read file and return data as a binary data.\n *\n * @param file          {File} File object containing file properties\n */\nFileReader.prototype.readAsBinaryString = function(file) {\n    if (initRead(this, file)) {\n        return this._realReader.readAsBinaryString(file);\n    }\n\n    var totalSize = file.end - file.start;\n    readSuccessCallback.bind(this)(\"readAsBinaryString\", null, file.start, totalSize, function(r) {\n        if (this._progress === 0) {\n            this._result = \"\";\n        }\n        this._result += r;\n    }.bind(this));\n};\n\n/**\n * Read file and return data as a binary data.\n *\n * @param file          {File} File object containing file properties\n */\nFileReader.prototype.readAsArrayBuffer = function(file) {\n    if (initRead(this, file)) {\n        return this._realReader.readAsArrayBuffer(file);\n    }\n\n    var totalSize = file.end - file.start;\n    readSuccessCallback.bind(this)(\"readAsArrayBuffer\", null, file.start, totalSize, function(r) {\n        var resultArray = (this._progress === 0 ? new Uint8Array(totalSize) : new Uint8Array(this._result));\n        resultArray.set(new Uint8Array(r), this._progress);\n        this._result = resultArray.buffer;\n    }.bind(this));\n};\n\nmodule.exports = FileReader;\n\n});\n"],"sourceRoot":"/source/"}