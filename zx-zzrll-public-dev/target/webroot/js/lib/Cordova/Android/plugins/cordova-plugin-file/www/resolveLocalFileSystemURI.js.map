{"version":3,"sources":["js/lib/Cordova/Android/plugins/cordova-plugin-file/www/resolveLocalFileSystemURI.js"],"names":["cordova","define","require","exports","module","checkBrowser","platformId","resolveLocalFileSystemURL","window","webkitResolveLocalFileSystemURL","argscheck","DirectoryEntry","FileEntry","FileError","exec","fileSystems","uri","successCallback","errorCallback","checkArgs","arguments","fail","error","split","length","setTimeout","ENCODING_ERR","success","entry","fsName","filesystemName","filesystem","name","PERSISTENT","getFs","fs","FileSystem","fullPath","result","nativeURL","NOT_FOUND_ERR","resolveLocalFileSystemURI","console","log","apply","this"],"mappings":"AAAAA,QAAQC,OAAO,gDAAiD,SAASC,EAASC,EAASC,IAqB3F,WAEI,QAASC,KACL,QAA2B,YAAvBL,QAAQM,aAA4BJ,EAAQ,mBAC5CE,EAAOD,QAAQI,0BAA4BC,OAAOD,2BAA6BC,OAAOC,iCAC/E,GAIf,IAAIJ,IAAJ,CAIA,GAAIK,GAAYR,EAAQ,qBACpBS,EAAiBT,EAAQ,oBACzBU,EAAYV,EAAQ,eACpBW,EAAYX,EAAQ,eACpBY,EAAOZ,EAAQ,gBACfa,EAAcb,EAAQ,gBAQ1BE,GAAOD,QAAQI,0BAA4BH,EAAOD,QAAQI,2BAA6B,SAASS,EAAKC,EAAiBC,GAClHR,EAAUS,UAAU,MAAO,4BAA6BC,UAExD,IAAIC,GAAO,SAASC,GACZJ,GACAA,EAAc,GAAIL,GAAUS,IAKpC,KAAIN,GAAOA,EAAIO,MAAM,KAAKC,OAAS,EAI/B,WAHAC,YAAY,WACRJ,EAAKR,EAAUa,eACjB,EAIN,IAAIC,GAAU,SAASC,GACnB,GAAIA,GACA,GAAIX,EAAiB,CAEjB,GAAIY,GAASD,EAAME,gBAAmBF,EAAMG,YAAcH,EAAMG,WAAWC,OAAUJ,EAAMG,YAAcvB,OAAOyB,WAAa,aAAe,YAC5IlB,GAAYmB,MAAML,EAAQ,SAASM,GAE1BA,IACDA,EAAK,GAAIC,YAAWP,GAASG,KAAK,GAAIK,SAAS,MAEnD,IAAIC,GAAUV,EAAiB,YAAI,GAAIjB,GAAeiB,EAAMI,KAAMJ,EAAMS,SAAUF,EAAIP,EAAMW,WAAa,GAAI3B,GAAUgB,EAAMI,KAAMJ,EAAMS,SAAUF,EAAIP,EAAMW,UAC7JtB,GAAgBqB,UAMxBjB,GAAKR,EAAU2B,eAIvB1B,GAAKa,EAASN,EAAM,OAAQ,6BAA8BL,KAG9DZ,EAAOD,QAAQsC,0BAA4B,WACvCC,QAAQC,IAAI,2FACZvC,EAAOD,QAAQI,0BAA0BqC,MAAMC,KAAMzB","file":"js/lib/Cordova/Android/plugins/cordova-plugin-file/www/resolveLocalFileSystemURI.js","sourcesContent":["cordova.define(\"cordova-plugin-file.resolveLocalFileSystemURI\", function(require, exports, module) {\n/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n(function() {\n    //For browser platform: not all browsers use overrided `resolveLocalFileSystemURL`.\n    function checkBrowser() {\n        if (cordova.platformId === \"browser\" && require('./isChrome')()) {\n            module.exports.resolveLocalFileSystemURL = window.resolveLocalFileSystemURL || window.webkitResolveLocalFileSystemURL;\n            return true;\n        }\n        return false;\n    }\n    if (checkBrowser()) {\n        return;\n    }\n\n    var argscheck = require('cordova/argscheck'),\n        DirectoryEntry = require('./DirectoryEntry'),\n        FileEntry = require('./FileEntry'),\n        FileError = require('./FileError'),\n        exec = require('cordova/exec');\n    var fileSystems = require('./fileSystems');\n\n    /**\n     * Look up file system Entry referred to by local URI.\n     * @param {DOMString} uri  URI referring to a local file or directory\n     * @param successCallback  invoked with Entry object corresponding to URI\n     * @param errorCallback    invoked if error occurs retrieving file system entry\n     */\n    module.exports.resolveLocalFileSystemURL = module.exports.resolveLocalFileSystemURL || function(uri, successCallback, errorCallback) {\n        argscheck.checkArgs('sFF', 'resolveLocalFileSystemURI', arguments);\n        // error callback\n        var fail = function(error) {\n            if (errorCallback) {\n                errorCallback(new FileError(error));\n            }\n        };\n        // sanity check for 'not:valid:filename' or '/not:valid:filename'\n        // file.spec.12 window.resolveLocalFileSystemURI should error (ENCODING_ERR) when resolving invalid URI with leading /.\n        if(!uri || uri.split(\":\").length > 2) {\n            setTimeout( function() {\n                fail(FileError.ENCODING_ERR);\n            },0);\n            return;\n        }\n        // if successful, return either a file or directory entry\n        var success = function(entry) {\n            if (entry) {\n                if (successCallback) {\n                    // create appropriate Entry object\n                    var fsName = entry.filesystemName || (entry.filesystem && entry.filesystem.name) || (entry.filesystem == window.PERSISTENT ? 'persistent' : 'temporary');\n                    fileSystems.getFs(fsName, function(fs) {\n                        // This should happen only on platforms that haven't implemented requestAllFileSystems (windows)\n                        if (!fs) {\n                            fs = new FileSystem(fsName, {name:\"\", fullPath:\"/\"});\n                        }\n                        var result = (entry.isDirectory) ? new DirectoryEntry(entry.name, entry.fullPath, fs, entry.nativeURL) : new FileEntry(entry.name, entry.fullPath, fs, entry.nativeURL);\n                        successCallback(result);\n                    });\n                }\n            }\n            else {\n                // no Entry object returned\n                fail(FileError.NOT_FOUND_ERR);\n            }\n        };\n\n        exec(success, fail, \"File\", \"resolveLocalFileSystemURI\", [uri]);\n    };\n\n    module.exports.resolveLocalFileSystemURI = function() {\n        console.log(\"resolveLocalFileSystemURI is deprecated. Please call resolveLocalFileSystemURL instead.\");\n        module.exports.resolveLocalFileSystemURL.apply(this, arguments);\n    };\n})();\n\n});\n"],"sourceRoot":"/source/"}